{
    "sourceFile": "lib/core/widgets/senders_bottom_sheet.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1695387538955,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1695387545105,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n import 'package:flutter/material.dart';\r\n import 'package:final_projectt/core/services/new_inbox_controller.dart';\r\n import 'package:final_projectt/core/util/constants/colors.dart';\r\n import 'package:final_projectt/models/sender_model.dart';\r\n+import 'package:flutter_spinkit/flutter_spinkit.dart';\r\n \r\n class SendersBottomSheet extends StatefulWidget {\r\n   const SendersBottomSheet({super.key});\r\n \r\n"
                }
            ],
            "date": 1695387538955,
            "name": "Commit-0",
            "content": "import 'package:easy_localization/easy_localization.dart';\r\nimport 'package:flutter/material.dart';\r\nimport 'package:final_projectt/core/services/new_inbox_controller.dart';\r\nimport 'package:final_projectt/core/util/constants/colors.dart';\r\nimport 'package:final_projectt/models/sender_model.dart';\r\n\r\nclass SendersBottomSheet extends StatefulWidget {\r\n  const SendersBottomSheet({super.key});\r\n\r\n  @override\r\n  State<SendersBottomSheet> createState() => _SendersBottomSheetState();\r\n}\r\n\r\nclass _SendersBottomSheetState extends State<SendersBottomSheet> {\r\n  TextEditingController searchTextField = TextEditingController();\r\n  late Future<Senders> senders;\r\n  late Map<String, SingleSender> searchMap = {};\r\n  List<MapEntry<String, SingleSender>> matchingPairs = [];\r\n\r\n  dynamic sendersData;\r\n\r\n  @override\r\n  void initState() {\r\n    senders = getSenders();\r\n    initializeData();\r\n    super.initState();\r\n  }\r\n\r\n  Future<Map<String, SingleSender>> initializeData() async {\r\n    final sendersData = (await getSenders()).data;\r\n\r\n    for (SingleSender sender in sendersData!) {\r\n      searchMap[sender.name!] = sender;\r\n    }\r\n    return searchMap;\r\n  }\r\n\r\n  void searchSenders(String target) {\r\n    String substring = target.toLowerCase();\r\n    matchingPairs.clear();\r\n\r\n    searchMap.forEach((key, singleSender) {\r\n      String nameLower = singleSender.name!.toLowerCase();\r\n\r\n      if (nameLower.contains(substring)) {\r\n        matchingPairs.add(MapEntry(key, singleSender));\r\n      }\r\n    });\r\n\r\n    setState(() {});\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Padding(\r\n      padding: const EdgeInsetsDirectional.only(top: 25, start: 20, end: 20),\r\n      child: SizedBox(\r\n        height: MediaQuery.of(context).size.height - 150,\r\n        child: Column(\r\n          crossAxisAlignment: CrossAxisAlignment.start,\r\n          mainAxisAlignment: MainAxisAlignment.start,\r\n          children: [\r\n            Row(\r\n              children: [\r\n                SizedBox(\r\n                  width: 270,\r\n                  child: TextField(\r\n                    controller: searchTextField,\r\n                    onChanged: (value) {\r\n                      searchSenders(value);\r\n                    },\r\n                    decoration: InputDecoration(\r\n                      prefixIcon: const Icon(Icons.search_rounded),\r\n                      suffixIcon: IconButton(\r\n                        onPressed: () {\r\n                          setState(() {\r\n                            searchTextField.clear();\r\n                          });\r\n                        },\r\n                        icon: const Icon(Icons.cancel),\r\n                      ),\r\n                      filled: true,\r\n                      fillColor: Colors.black.withOpacity(0.05),\r\n                      contentPadding: const EdgeInsets.all(15),\r\n                      hintText: \"Search ...\".tr(),\r\n                      hintStyle:\r\n                          const TextStyle(color: Colors.grey, fontSize: 19),\r\n                      enabledBorder: UnderlineInputBorder(\r\n                        borderSide: BorderSide(color: backGroundColor),\r\n                        borderRadius: BorderRadius.circular(30),\r\n                      ),\r\n                      focusedBorder: UnderlineInputBorder(\r\n                        borderRadius: BorderRadius.circular(30),\r\n                        borderSide: BorderSide(color: backGroundColor),\r\n                      ),\r\n                    ),\r\n                  ),\r\n                ),\r\n                const SizedBox(\r\n                  width: 20,\r\n                ),\r\n                TextButton(\r\n                  style: TextButton.styleFrom(\r\n                      padding: EdgeInsets.zero,\r\n                      minimumSize: const Size(50, 30),\r\n                      tapTargetSize: MaterialTapTargetSize.shrinkWrap,\r\n                      alignment: Alignment.centerLeft),\r\n                  onPressed: () => Navigator.pop(context),\r\n                  child: Text(\r\n                    'cancel'.tr(),\r\n                    style: TextStyle(\r\n                      color: primaryColor,\r\n                      fontSize: 23,\r\n                    ),\r\n                  ),\r\n                )\r\n              ],\r\n            ),\r\n            Expanded(\r\n              child: Padding(\r\n                padding: const EdgeInsetsDirectional.only(top: 10.0),\r\n                child: FutureBuilder(\r\n                  future: senders,\r\n                  builder: (context, snapshot) {\r\n                    if (snapshot.connectionState == ConnectionState.waiting) {\r\n                      return Center(\r\n                        child: SpinKitPulse(\r\n                          duration: Duration(milliseconds: 1000),\r\n                          color: Colors.grey,\r\n                          size: 40,\r\n                        ),\r\n                      );\r\n                    } else if (snapshot.hasError) {\r\n                      return Text(snapshot.error.toString());\r\n                    } else if (!snapshot.hasData) {\r\n                      return Center(\r\n                        child: Text('No data available.'.tr()),\r\n                      );\r\n                    }\r\n\r\n                    sendersData = snapshot.data as Senders;\r\n                    final categorizedSenders = categorizeSenders(sendersData);\r\n                    if (matchingPairs.isEmpty &&\r\n                        searchTextField.text.isNotEmpty) {\r\n                      return Center(\r\n                        child: Column(\r\n                          // mainAxisAlignment: MainAxisAlignment.center,\r\n                          // crossAxisAlignment: CrossAxisAlignment.center,\r\n                          children: [\r\n                            GestureDetector(\r\n                              onTap: () {\r\n                                Navigator.pop(context, searchTextField.text);\r\n                              },\r\n                              child: Column(\r\n                                crossAxisAlignment: CrossAxisAlignment.start,\r\n                                children: [\r\n                                  Container(\r\n                                    margin: const EdgeInsets.only(\r\n                                        top: 10, bottom: 20),\r\n                                    width: MediaQuery.sizeOf(context).width,\r\n                                    height: 1,\r\n                                    color: Colors.grey.shade300,\r\n                                  ),\r\n                                  Text(\r\n                                    'Do you want create \"${searchTextField.text}\" as new sender?',\r\n                                    style: TextStyle(\r\n                                        color: primaryColor,\r\n                                        fontSize: 20,\r\n                                        fontWeight: FontWeight.w600),\r\n                                  ),\r\n                                  Container(\r\n                                    margin: const EdgeInsets.only(top: 20),\r\n                                    width: MediaQuery.sizeOf(context).width,\r\n                                    height: 1,\r\n                                    color: Colors.grey.shade300,\r\n                                  )\r\n                                ],\r\n                              ),\r\n                            ),\r\n                            const SizedBox(\r\n                              height: 70,\r\n                            ),\r\n                            Align(\r\n                              alignment: Alignment.center,\r\n                              child: Image.asset('images/result_not_found.png',\r\n                                  fit: BoxFit.cover, height: 250),\r\n                            ),\r\n                          ],\r\n                        ),\r\n                      );\r\n                    }\r\n                    return ListView.separated(\r\n                      separatorBuilder: (context, index) {\r\n                        return const SizedBox(\r\n                          height: 10,\r\n                        );\r\n                      },\r\n                      physics: const BouncingScrollPhysics(),\r\n                      itemCount: categorizedSenders.length,\r\n                      itemBuilder: (context, sectionIndex) {\r\n                        final category =\r\n                            categorizedSenders.keys.elementAt(sectionIndex);\r\n                        final categorySenders = categorizedSenders[category]!;\r\n\r\n                        // Filter the matchingPairs for the current category and search term\r\n                        final filteredMatchingPairs =\r\n                            matchingPairs.where((entry) {\r\n                          final sender = entry.value;\r\n                          final senderCategory =\r\n                              sender.category!.name!.toLowerCase();\r\n                          final senderName = sender.name!.toLowerCase();\r\n                          final searchTerm = searchTextField.text.toLowerCase();\r\n\r\n                          return senderCategory == category.toLowerCase() &&\r\n                              (senderName.contains(searchTerm) ||\r\n                                  sender.mobile!.contains(searchTerm));\r\n                        }).toList();\r\n\r\n                        // Check if the section is empty, and skip it if so\r\n                        if ((filteredMatchingPairs.isEmpty &&\r\n                                categorySenders.isEmpty) ||\r\n                            (filteredMatchingPairs.isEmpty &&\r\n                                searchTextField.text.isNotEmpty)) {\r\n                          return const SizedBox\r\n                              .shrink(); // Hide the empty section\r\n                        }\r\n\r\n                        return Column(\r\n                          children: [\r\n                            Column(\r\n                              crossAxisAlignment: CrossAxisAlignment.start,\r\n                              mainAxisAlignment: MainAxisAlignment.start,\r\n                              children: [\r\n                                Padding(\r\n                                  padding: const EdgeInsetsDirectional.only(\r\n                                    top: 20.0,\r\n                                    start: 5,\r\n                                  ),\r\n                                  child: Text(\r\n                                    category,\r\n                                    style: const TextStyle(\r\n                                      fontSize: 20,\r\n                                      fontWeight: FontWeight.w600,\r\n                                    ),\r\n                                  ),\r\n                                ),\r\n                                Container(\r\n                                  margin: const EdgeInsets.only(top: 10),\r\n                                  width: MediaQuery.of(context).size.width,\r\n                                  height: 1,\r\n                                  color: Colors.grey.shade300,\r\n                                )\r\n                              ],\r\n                            ),\r\n                            ListView.builder(\r\n                              shrinkWrap: true,\r\n                              physics: const NeverScrollableScrollPhysics(),\r\n                              itemCount: searchTextField.text.isNotEmpty\r\n                                  ? filteredMatchingPairs.length\r\n                                  : categorySenders.length,\r\n                              itemBuilder: (context, itemIndex) {\r\n                                final entry = searchTextField.text.isNotEmpty &&\r\n                                        itemIndex < filteredMatchingPairs.length\r\n                                    ? filteredMatchingPairs[itemIndex]\r\n                                    : null;\r\n\r\n                                final sender = searchTextField.text.isEmpty &&\r\n                                        itemIndex < categorySenders.length\r\n                                    ? categorySenders[itemIndex]\r\n                                    : null;\r\n\r\n                                if (entry != null) {\r\n                                  return ListTile(\r\n                                    onTap: () {\r\n                                      setState(() {\r\n                                        Navigator.pop(\r\n                                            context,\r\n                                            entry\r\n                                                .value); // Use entry.value to access SingleSender\r\n                                      });\r\n                                    },\r\n                                    leading:\r\n                                        const Icon(Icons.person_3_outlined),\r\n                                    title: Column(\r\n                                      crossAxisAlignment:\r\n                                          CrossAxisAlignment.start,\r\n                                      mainAxisAlignment:\r\n                                          MainAxisAlignment.start,\r\n                                      children: [\r\n                                        Text(\r\n                                          entry.value.name!,\r\n                                          style: const TextStyle(fontSize: 20),\r\n                                        ),\r\n                                        const SizedBox(\r\n                                          height: 8,\r\n                                        ),\r\n                                        Row(\r\n                                          children: [\r\n                                            const Icon(\r\n                                              Icons.phone,\r\n                                              size: 20,\r\n                                            ),\r\n                                            const SizedBox(\r\n                                              width: 10,\r\n                                            ),\r\n                                            Text(\r\n                                              entry.value.mobile!,\r\n                                              style:\r\n                                                  const TextStyle(fontSize: 17),\r\n                                            )\r\n                                          ],\r\n                                        )\r\n                                      ],\r\n                                    ),\r\n                                  );\r\n                                } else if (sender != null) {\r\n                                  return ListTile(\r\n                                    onTap: () {\r\n                                      setState(() {\r\n                                        Navigator.pop(context, sender);\r\n                                      });\r\n                                    },\r\n                                    leading:\r\n                                        const Icon(Icons.person_3_outlined),\r\n                                    title: Column(\r\n                                      crossAxisAlignment:\r\n                                          CrossAxisAlignment.start,\r\n                                      mainAxisAlignment:\r\n                                          MainAxisAlignment.start,\r\n                                      children: [\r\n                                        Text(\r\n                                          sender.name!,\r\n                                          style: const TextStyle(fontSize: 20),\r\n                                        ),\r\n                                        const SizedBox(\r\n                                          height: 8,\r\n                                        ),\r\n                                        Row(\r\n                                          children: [\r\n                                            const Icon(\r\n                                              Icons.phone,\r\n                                              size: 20,\r\n                                            ),\r\n                                            const SizedBox(\r\n                                              width: 10,\r\n                                            ),\r\n                                            Text(\r\n                                              sender.mobile!,\r\n                                              style:\r\n                                                  const TextStyle(fontSize: 17),\r\n                                            )\r\n                                          ],\r\n                                        )\r\n                                      ],\r\n                                    ),\r\n                                  );\r\n                                }\r\n                                return const SizedBox\r\n                                    .shrink(); // Hide empty items\r\n                              },\r\n                            ),\r\n                          ],\r\n                        );\r\n                      },\r\n                    );\r\n                  },\r\n                ),\r\n              ),\r\n            ),\r\n          ],\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  // searchSenders(Senders sendersData, String searchTerm) {\r\n  //   result.clear();\r\n  //   for (int i = 0; i < sendersData.data.length; i++) {\r\n  //     final sender = sendersData.data[i];\r\n  //     final senderName = sender.name;\r\n  //     final senderMobile = sender.mobile;\r\n\r\n  //     if (senderMobile.contains(searchTerm) ||\r\n  //         senderName.contains(searchTerm)) {\r\n  //       result.addAll([senderName, senderMobile]);\r\n  //     }\r\n  //   }\r\n  // }\r\n}\r\n\r\nMap<String, List<SingleSender>> categorizeSenders(Senders sendersData) {\r\n  final categorizedSenders = <String, List<SingleSender>>{};\r\n\r\n  for (final sender in sendersData.data!) {\r\n    final category = sender.category!.name;\r\n    if (!categorizedSenders.containsKey(category!)) {\r\n      categorizedSenders[category] = <SingleSender>[];\r\n    }\r\n    categorizedSenders[category]!.add(sender);\r\n  }\r\n\r\n  return categorizedSenders;\r\n}\r\n"
        }
    ]
}