{
    "sourceFile": "lib/core/widgets/my_drawer.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 12,
            "patches": [
                {
                    "date": 1695496641738,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1695496651137,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n part of '../flutter_advanced_drawer.dart';\r\n \r\n /// AdvancedDrawer widget.\r\n-class AdvancedDrawer extends StatefulWidget {\r\n+class MYAdvancedDrawer extends StatefulWidget {\r\n   const AdvancedDrawer({\r\n     Key? key,\r\n     required this.child,\r\n     required this.drawer,\r\n"
                },
                {
                    "date": 1695496677933,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n part of '../flutter_advanced_drawer.dart';\r\n \r\n-/// AdvancedDrawer widget.\r\n+/// MYAdvancedDrawer widget.\r\n class MYAdvancedDrawer extends StatefulWidget {\r\n-  const AdvancedDrawer({\r\n+  const MYAdvancedDrawer({\r\n     Key? key,\r\n     required this.child,\r\n     required this.drawer,\r\n     this.controller,\r\n@@ -66,9 +66,9 @@\n   @override\r\n   _AdvancedDrawerState createState() => _AdvancedDrawerState();\r\n }\r\n \r\n-class _AdvancedDrawerState extends State<AdvancedDrawer>\r\n+class _AdvancedDrawerState extends State<MYAdvancedDrawer>\r\n     with TickerProviderStateMixin {\r\n   final _spareController = AdvancedDrawerController();\r\n \r\n   late AnimationController _spareAnimationController;\r\n@@ -92,9 +92,9 @@\n     _initControllers();\r\n   }\r\n \r\n   @override\r\n-  void didUpdateWidget(covariant AdvancedDrawer oldWidget) {\r\n+  void didUpdateWidget(covariant MYAdvancedDrawer oldWidget) {\r\n     _initControllers();\r\n \r\n     super.didUpdateWidget(oldWidget);\r\n   }\r\n"
                },
                {
                    "date": 1695496702360,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,9 +63,9 @@\n   /// Controller that controls widget animation.\r\n   final AnimationController? animationController;\r\n \r\n   @override\r\n-  _AdvancedDrawerState createState() => _AdvancedDrawerState();\r\n+  _MYAdvancedDrawerState createState() => _AdvancedDrawerState();\r\n }\r\n \r\n class _AdvancedDrawerState extends State<MYAdvancedDrawer>\r\n     with TickerProviderStateMixin {\r\n"
                },
                {
                    "date": 1695496708365,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,12 +63,12 @@\n   /// Controller that controls widget animation.\r\n   final AnimationController? animationController;\r\n \r\n   @override\r\n-  _MYAdvancedDrawerState createState() => _AdvancedDrawerState();\r\n+  _MYAdvancedDrawerState createState() => _MYAdvancedDrawerState();\r\n }\r\n \r\n-class _AdvancedDrawerState extends State<MYAdvancedDrawer>\r\n+class _MYAdvancedDrawerState extends State<MYAdvancedDrawer>\r\n     with TickerProviderStateMixin {\r\n   final _spareController = AdvancedDrawerController();\r\n \r\n   late AnimationController _spareAnimationController;\r\n"
                },
                {
                    "date": 1695496716216,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n part of '../flutter_advanced_drawer.dart';\r\n-\r\n+impor\r\n /// MYAdvancedDrawer widget.\r\n class MYAdvancedDrawer extends StatefulWidget {\r\n   const MYAdvancedDrawer({\r\n     Key? key,\r\n"
                },
                {
                    "date": 1695496721618,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n part of '../flutter_advanced_drawer.dart';\r\n-impor\r\n+import 'package:flutter/material.dart';\r\n /// MYAdvancedDrawer widget.\r\n class MYAdvancedDrawer extends StatefulWidget {\r\n   const MYAdvancedDrawer({\r\n     Key? key,\r\n"
                },
                {
                    "date": 1695496727618,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-part of '../flutter_advanced_drawer.dart';\r\n+ \r\n import 'package:flutter/material.dart';\r\n /// MYAdvancedDrawer widget.\r\n class MYAdvancedDrawer extends StatefulWidget {\r\n   const MYAdvancedDrawer({\r\n"
                },
                {
                    "date": 1695496739721,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n- \r\n+\r\n import 'package:flutter/material.dart';\r\n+import 'package:flutter_advanced_drawer/flutter_advanced_drawer.dart';\r\n /// MYAdvancedDrawer widget.\r\n class MYAdvancedDrawer extends StatefulWidget {\r\n   const MYAdvancedDrawer({\r\n     Key? key,\r\n"
                },
                {
                    "date": 1695496888823,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n     this.controller,\r\n     this.backdropColor,\r\n     this.backdrop,\r\n     this.openRatio = 0.75,\r\n-    this.openScale = 0.85,\r\n+    this.openScale = 0.9,\r\n     this.animationDuration = const Duration(milliseconds: 250),\r\n     this.animationCurve,\r\n     this.childDecoration,\r\n     this.animateChildDecoration = true,\r\n"
                },
                {
                    "date": 1695496914748,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n     this.controller,\r\n     this.backdropColor,\r\n     this.backdrop,\r\n     this.openRatio = 0.75,\r\n-    this.openScale = 0.9,\r\n+    this.openScale = 0.35,\r\n     this.animationDuration = const Duration(milliseconds: 250),\r\n     this.animationCurve,\r\n     this.childDecoration,\r\n     this.animateChildDecoration = true,\r\n"
                },
                {
                    "date": 1695496930525,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n+\r\n import 'package:flutter/material.dart';\r\n import 'package:flutter_advanced_drawer/flutter_advanced_drawer.dart';\r\n-\r\n /// MYAdvancedDrawer widget.\r\n class MYAdvancedDrawer extends StatefulWidget {\r\n   const MYAdvancedDrawer({\r\n     Key? key,\r\n@@ -9,10 +9,10 @@\n     required this.drawer,\r\n     this.controller,\r\n     this.backdropColor,\r\n     this.backdrop,\r\n-    this.openRatio = 0.35,\r\n-    this.openScale = 0.35,\r\n+    this.openRatio = 0.75,\r\n+    this.openScale = 0.85,\r\n     this.animationDuration = const Duration(milliseconds: 250),\r\n     this.animationCurve,\r\n     this.childDecoration,\r\n     this.animateChildDecoration = true,\r\n"
                },
                {
                    "date": 1695496991008,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -236,9 +236,9 @@\n     ).animate(parentAnimation);\r\n \r\n     _childScaleAnimation = Tween<double>(\r\n       begin: 1.0,\r\n-      end: 0.5,\r\n+      end: 0.75,\r\n     ).animate(parentAnimation);\r\n \r\n     _childDecorationAnimation = DecorationTween(\r\n       begin: const BoxDecoration(),\r\n"
                }
            ],
            "date": 1695496641738,
            "name": "Commit-0",
            "content": "part of '../flutter_advanced_drawer.dart';\r\n\r\n/// AdvancedDrawer widget.\r\nclass AdvancedDrawer extends StatefulWidget {\r\n  const AdvancedDrawer({\r\n    Key? key,\r\n    required this.child,\r\n    required this.drawer,\r\n    this.controller,\r\n    this.backdropColor,\r\n    this.backdrop,\r\n    this.openRatio = 0.75,\r\n    this.openScale = 0.85,\r\n    this.animationDuration = const Duration(milliseconds: 250),\r\n    this.animationCurve,\r\n    this.childDecoration,\r\n    this.animateChildDecoration = true,\r\n    this.rtlOpening = false,\r\n    this.disabledGestures = false,\r\n    this.animationController,\r\n  }) : super(key: key);\r\n\r\n  /// Child widget. (Usually widget that represent a screen)\r\n  final Widget child;\r\n\r\n  /// Drawer widget. (Widget behind the [child]).\r\n  final Widget drawer;\r\n\r\n  /// Controller that controls widget state.\r\n  final AdvancedDrawerController? controller;\r\n\r\n  /// Backdrop color.\r\n  final Color? backdropColor;\r\n\r\n  /// Backdrop widget for custom background.\r\n  final Widget? backdrop;\r\n\r\n  /// Opening ratio.\r\n  final double openRatio;\r\n\r\n  /// Opening ratio.\r\n  final double openScale;\r\n\r\n  /// Animation duration.\r\n  final Duration animationDuration;\r\n\r\n  /// Animation curve.\r\n  final Curve? animationCurve;\r\n\r\n  /// Child container decoration in open widget state.\r\n  final BoxDecoration? childDecoration;\r\n\r\n  /// Indicates that [childDecoration] might be animated or not.\r\n  /// NOTICE: It may cause animation jerks.\r\n  final bool animateChildDecoration;\r\n\r\n  /// Opening from Right-to-left.\r\n  final bool rtlOpening;\r\n\r\n  /// Disable gestures.\r\n  final bool disabledGestures;\r\n\r\n  /// Controller that controls widget animation.\r\n  final AnimationController? animationController;\r\n\r\n  @override\r\n  _AdvancedDrawerState createState() => _AdvancedDrawerState();\r\n}\r\n\r\nclass _AdvancedDrawerState extends State<AdvancedDrawer>\r\n    with TickerProviderStateMixin {\r\n  final _spareController = AdvancedDrawerController();\r\n\r\n  late AnimationController _spareAnimationController;\r\n  late AnimationController _animationController;\r\n\r\n  late Animation<double> _drawerScaleAnimation;\r\n  late Animation<Offset> _childSlideAnimation;\r\n  late Animation<double> _childScaleAnimation;\r\n  late Animation<Decoration> _childDecorationAnimation;\r\n\r\n  late double _offsetValue;\r\n  late Offset _freshPosition;\r\n\r\n  bool _captured = false;\r\n  Offset? _startPosition;\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n\r\n    _initControllers();\r\n  }\r\n\r\n  @override\r\n  void didUpdateWidget(covariant AdvancedDrawer oldWidget) {\r\n    _initControllers();\r\n\r\n    super.didUpdateWidget(oldWidget);\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Material(\r\n      color: widget.backdropColor,\r\n      child: GestureDetector(\r\n        onHorizontalDragStart:\r\n            widget.disabledGestures ? null : _handleDragStart,\r\n        onHorizontalDragUpdate:\r\n            widget.disabledGestures ? null : _handleDragUpdate,\r\n        onHorizontalDragEnd: widget.disabledGestures ? null : _handleDragEnd,\r\n        onHorizontalDragCancel:\r\n            widget.disabledGestures ? null : _handleDragCancel,\r\n        child: Container(\r\n          color: Colors.transparent,\r\n          child: Stack(\r\n            children: [\r\n              if (widget.backdrop != null) widget.backdrop!,\r\n              Align(\r\n                alignment: widget.rtlOpening\r\n                    ? Alignment.centerRight\r\n                    : Alignment.centerLeft,\r\n                child: FractionallySizedBox(\r\n                  widthFactor: widget.openRatio,\r\n                  child: ScaleTransition(\r\n                    scale: _drawerScaleAnimation,\r\n                    alignment: widget.rtlOpening\r\n                        ? Alignment.centerLeft\r\n                        : Alignment.centerRight,\r\n                    child: RepaintBoundary(\r\n                      child: widget.drawer,\r\n                    ),\r\n                  ),\r\n                ),\r\n              ),\r\n              SlideTransition(\r\n                position: _childSlideAnimation,\r\n                textDirection:\r\n                    widget.rtlOpening ? TextDirection.rtl : TextDirection.ltr,\r\n                child: ScaleTransition(\r\n                  scale: _childScaleAnimation,\r\n                  child: Builder(\r\n                    builder: (_) {\r\n                      final childStack = Stack(\r\n                        children: [\r\n                          RepaintBoundary(child: widget.child),\r\n                          ValueListenableBuilder<AdvancedDrawerValue>(\r\n                            valueListenable: _controller,\r\n                            builder: (_, value, __) {\r\n                              if (!value.visible) {\r\n                                return const SizedBox();\r\n                              }\r\n\r\n                              return Material(\r\n                                color: Colors.transparent,\r\n                                child: InkWell(\r\n                                  onTap: _controller.hideDrawer,\r\n                                  highlightColor: Colors.transparent,\r\n                                  child: Container(),\r\n                                ),\r\n                              );\r\n                            },\r\n                          ),\r\n                        ],\r\n                      );\r\n\r\n                      if (widget.animateChildDecoration &&\r\n                          widget.childDecoration != null) {\r\n                        return AnimatedBuilder(\r\n                          animation: _childDecorationAnimation,\r\n                          builder: (_, child) {\r\n                            return Container(\r\n                              clipBehavior: Clip.antiAlias,\r\n                              decoration: _childDecorationAnimation.value,\r\n                              child: child,\r\n                            );\r\n                          },\r\n                          child: childStack,\r\n                        );\r\n                      }\r\n\r\n                      return Container(\r\n                        clipBehavior: widget.childDecoration != null\r\n                            ? Clip.antiAlias\r\n                            : Clip.none,\r\n                        decoration: widget.childDecoration,\r\n                        child: childStack,\r\n                      );\r\n                    },\r\n                  ),\r\n                ),\r\n              ),\r\n            ],\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  AdvancedDrawerController get _controller {\r\n    return widget.controller ?? _spareController;\r\n  }\r\n\r\n  void _initControllers() {\r\n    _controller\r\n      ..removeListener(_handleControllerChanged)\r\n      ..addListener(_handleControllerChanged);\r\n\r\n    _spareAnimationController = AnimationController(\r\n      vsync: this,\r\n      value: _controller.value.visible ? 1 : 0,\r\n    );\r\n\r\n    _animationController =\r\n        widget.animationController ?? _spareAnimationController;\r\n\r\n    _animationController.reverseDuration =\r\n        _animationController.duration = widget.animationDuration;\r\n\r\n    final parentAnimation = widget.animationCurve == null\r\n        ? _animationController\r\n        : CurvedAnimation(\r\n            curve: widget.animationCurve!,\r\n            parent: _animationController,\r\n          );\r\n\r\n    _drawerScaleAnimation = Tween<double>(\r\n      begin: 0.75,\r\n      end: 1.0,\r\n    ).animate(parentAnimation);\r\n\r\n    _childSlideAnimation = Tween<Offset>(\r\n      begin: Offset.zero,\r\n      end: Offset(widget.openRatio, 0),\r\n    ).animate(parentAnimation);\r\n\r\n    _childScaleAnimation = Tween<double>(\r\n      begin: 1.0,\r\n      end: widget.openScale,\r\n    ).animate(parentAnimation);\r\n\r\n    _childDecorationAnimation = DecorationTween(\r\n      begin: const BoxDecoration(),\r\n      end: widget.childDecoration,\r\n    ).animate(parentAnimation);\r\n  }\r\n\r\n  void _handleControllerChanged() {\r\n    _controller.value.visible\r\n        ? _animationController.forward()\r\n        : _animationController.reverse();\r\n  }\r\n\r\n  void _handleDragStart(DragStartDetails details) {\r\n    _captured = true;\r\n    _startPosition = details.globalPosition;\r\n    _offsetValue = _animationController.value;\r\n  }\r\n\r\n  void _handleDragUpdate(DragUpdateDetails details) {\r\n    if (!_captured) return;\r\n\r\n    final screenSize = MediaQuery.of(context).size;\r\n\r\n    _freshPosition = details.globalPosition;\r\n\r\n    final diff = (_freshPosition - _startPosition!).dx;\r\n\r\n    _animationController.value = _offsetValue +\r\n        (diff / (screenSize.width * widget.openRatio)) *\r\n            (widget.rtlOpening ? -1 : 1);\r\n  }\r\n\r\n  void _handleDragEnd(DragEndDetails details) {\r\n    if (!_captured) return;\r\n\r\n    _captured = false;\r\n\r\n    if (_animationController.value >= 0.5) {\r\n      if (_controller.value.visible) {\r\n        _animationController.forward();\r\n      } else {\r\n        _controller.showDrawer();\r\n      }\r\n    } else {\r\n      if (!_controller.value.visible) {\r\n        _animationController.reverse();\r\n      } else {\r\n        _controller.hideDrawer();\r\n      }\r\n    }\r\n  }\r\n\r\n  void _handleDragCancel() {\r\n    _captured = false;\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    _spareController\r\n      ..removeListener(_handleControllerChanged)\r\n      ..dispose();\r\n\r\n    _spareAnimationController.dispose();\r\n\r\n    super.dispose();\r\n  }\r\n}\r\n"
        }
    ]
}