{
    "sourceFile": "lib/core/services/new_inbox_controller.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1695422434078,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1695422905257,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,9 +135,9 @@\n   return response.statusCode;\r\n }\r\n \r\n Future<void>? uploadImages(BuildContext context, int mailId) {\r\n-  final imagesProvider = Provider.of<NewInboxProvider>(context,li).imagesFiles;\r\n+  final imagesProvider = Provider.of<NewInboxProvider>(context,listen: ).imagesFiles;\r\n   for (int i = 0; i < imagesProvider.length; i++) {\r\n     uploadImage(File(imagesProvider[i]!.path), mailId);\r\n   }\r\n   return null;\r\n"
                }
            ],
            "date": 1695422434078,
            "name": "Commit-0",
            "content": "import 'dart:convert';\r\nimport 'dart:io';\r\nimport 'package:final_projectt/core/util/constants/end_points.dart';\r\nimport 'package:final_projectt/models/mail_model.dart';\r\nimport 'package:final_projectt/models/user_model.dart';\r\nimport 'package:final_projectt/providers/new_inbox_provider.dart';\r\nimport 'package:flutter/material.dart';\r\nimport 'package:http/http.dart' as http;\r\nimport 'package:final_projectt/core/helpers/api_base_helper.dart';\r\nimport 'package:final_projectt/core/helpers/token_helper.dart';\r\nimport 'package:final_projectt/models/sender_model.dart';\r\nimport 'package:final_projectt/models/tags_model.dart';\r\nimport 'package:provider/provider.dart';\r\nimport 'package:shared_preferences/shared_preferences.dart';\r\n\r\nFuture<Senders> getSenders() async {\r\n  final ApiBaseHelper _helper = ApiBaseHelper();\r\n  final String token = await getToken();\r\n  final response = await _helper.get(\r\n    '/senders?mail=true',\r\n    {'Authorization': 'Bearer $token'},\r\n  );\r\n  return SendersModel.fromJson(response[1]).senders!;\r\n}\r\n\r\nFuture<Tag> getTags() async {\r\n  final ApiBaseHelper _helper = ApiBaseHelper();\r\n  final String token = await getToken();\r\n  final response = await _helper.get(\r\n    '/tags',\r\n    {'Authorization': 'Bearer $token'},\r\n  );\r\n  return Tag.fromJson(response[1]);\r\n}\r\n\r\nFuture<void> createTag(String tagName) async {\r\n  final ApiBaseHelper _helper = ApiBaseHelper();\r\n  final String token = await getToken();\r\n  final response = await _helper.post(\r\n    '/tags',\r\n    {'name': tagName},\r\n    {'Authorization': 'Bearer $token'},\r\n  );\r\n}\r\n\r\nFuture<MailModel> newInbox({\r\n  required String subject,\r\n  required String archiveNumber,\r\n  required String archiveDate,\r\n  required String statusId,\r\n  String? description,\r\n  String? senderId,\r\n  String? decision,\r\n  String? finalDecision,\r\n  List<int>? tags,\r\n  List<Map<String, dynamic>>? activities,\r\n}) async {\r\n  final String token = await getToken();\r\n  final ApiBaseHelper _helper = ApiBaseHelper();\r\n  final response = await _helper.post('/mails', {\r\n    \"subject\": subject,\r\n    \"description\": description,\r\n    \"sender_id\": senderId,\r\n    \"archive_number\": archiveNumber,\r\n    \"archive_date\": archiveDate,\r\n    \"decision\": decision,\r\n    \"status_id\": statusId,\r\n    \"final_decision\": finalDecision,\r\n    \"tags\": jsonEncode(tags),\r\n    \"activities\": jsonEncode(activities),\r\n  }, {\r\n    'Authorization': 'Bearer $token',\r\n    'Accept': 'application/json',\r\n  });\r\n\r\n  return MailModel.fromJson(response[1]);\r\n}\r\n\r\nFuture<void> updateMail({\r\n  int? mailId,\r\n  String? statusId,\r\n  String? decision,\r\n  String? finalDecision,\r\n  List<int>? tags,\r\n  List<int>? idAttachmentsForDelete,\r\n  List<String>? pathAttachmentsForDelete,\r\n  List<Map<String, dynamic>>? activities,\r\n}) async {\r\n  final String token = await getToken();\r\n  // final ApiBaseHelper helper = ApiBaseHelper();\r\n  final response = await http.put(Uri.parse('$baseUrl/mails/$mailId'), body: {\r\n    \"pathAttachmentsForDelete\": jsonEncode(pathAttachmentsForDelete),\r\n    \"idAttachmentsForDelete\": jsonEncode(idAttachmentsForDelete),\r\n    \"decision\": decision,\r\n    \"status_id\": statusId,\r\n    \"final_decision\": finalDecision,\r\n    \"tags\": jsonEncode(tags),\r\n    \"activities\": jsonEncode(activities),\r\n  }, headers: {\r\n    'Authorization': 'Bearer $token',\r\n    'Accept': 'application/json',\r\n  });\r\n\r\n  // return MailModel.fromJson(response[1]);\r\n}\r\n\r\nFuture<List<TagElement>> getAllTags() async {\r\n  final SharedPreferences prefs = await SharedPreferences.getInstance();\r\n  UserModel user = userFromJson(prefs.getString('user')!);\r\n  final response = await http.get(Uri.parse('$baseUrl/tags'),\r\n      headers: {'Authorization': 'Bearer ${user.token}'});\r\n  if (response.statusCode == 200) {\r\n    final data = jsonDecode(response.body)['tags'] as List<dynamic>;\r\n    return data.map((e) => TagElement.fromJson(e)).toList();\r\n  }\r\n\r\n  return Future.error('Error while fetching Tags data');\r\n}\r\n\r\nFuture<int> uploadImage(File file, mailId) async {\r\n  String token = await getToken();\r\n  var request =\r\n      http.MultipartRequest(\"POST\", Uri.parse('$baseUrl/attachments'));\r\n  var pic = await http.MultipartFile.fromPath('image', file.path);\r\n  request.fields['mail_id'] = mailId.toString();\r\n  request.fields['title'] = 'image_${DateTime.now()}';\r\n  request.files.add(pic);\r\n  request.headers\r\n      .addAll({'Accept': 'application/json', 'Authorization': 'Bearer $token'});\r\n  var response = await request.send();\r\n\r\n  var responseData = await response.stream.toBytes();\r\n  var responseString = String.fromCharCodes(responseData);\r\n  debugPrint(responseString);\r\n  return response.statusCode;\r\n}\r\n\r\nFuture<void>? uploadImages(BuildContext context, int mailId) {\r\n  final imagesProvider =\r\n      Provider.of<NewInboxProvider>(context).imagesFiles;\r\n  for (int i = 0; i < imagesProvider.length; i++) {\r\n    uploadImage(File(imagesProvider[i]!.path), mailId);\r\n  }\r\n  return null;\r\n}\r\n\r\nFuture<NewSender>? createSender({\r\n  String? name,\r\n  String? mobile,\r\n  String? categoryId,\r\n}) async {\r\n  final token = await getToken();\r\n  final ApiBaseHelper helper = ApiBaseHelper();\r\n\r\n  final response =\r\n      await http.post(Uri.parse('$baseUrl/senders?mail=fasle'), body: {\r\n    'name': name,\r\n    'mobile': mobile,\r\n    'address': '',\r\n    'category_id': categoryId,\r\n  }, headers: {\r\n    'Accept': 'application/json',\r\n    'Authorization': 'Bearer $token'\r\n  });\r\n\r\n  return NewSender.fromJson(json.decode(response.body));\r\n}\r\n"
        }
    ]
}