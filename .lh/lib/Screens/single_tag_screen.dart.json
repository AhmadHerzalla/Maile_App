{
    "sourceFile": "lib/Screens/single_tag_screen.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 19,
            "patches": [
                {
                    "date": 1695036954459,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1695036959929,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n import '../core/util/constants/colors.dart';\r\n import '../models/mail_model.dart';\r\n import '../models/tags_model.dart';\r\n \r\n-class TagsScreen extends StatefulWidget {\r\n+class TagScreen extends StatefulWidget {\r\n   List<TagElement> tagsList;\r\n   TagsScreen({\r\n     Key? key,\r\n     required this.tagsList,\r\n"
                },
                {
                    "date": 1695036965525,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,11 +8,11 @@\n import '../core/util/constants/colors.dart';\r\n import '../models/mail_model.dart';\r\n import '../models/tags_model.dart';\r\n \r\n-class TagScreen extends StatefulWidget {\r\n+class SingleTagScreen extends StatefulWidget {\r\n   List<TagElement> tagsList;\r\n-  TagsScreen({\r\n+  SingleTagScreen({\r\n     Key? key,\r\n     required this.tagsList,\r\n   }) : super(key: key);\r\n \r\n"
                },
                {
                    "date": 1695036971184,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,12 +16,12 @@\n     required this.tagsList,\r\n   }) : super(key: key);\r\n \r\n   @override\r\n-  State<TagsScreen> createState() => _TagsScreenState();\r\n+  State<SingleTagScreen> createState() => _SingleTagScreenState();\r\n }\r\n \r\n-class _TagsScreenState extends State<TagsScreen> {\r\n+class _TagsScreenState extends State<SingleTagScreen> {\r\n   late Future<List<Mail>> mails;\r\n   List<int> allTagsIds = [];\r\n   Set<int> tagsIdsToBeShown = {};\r\n   int greyIndex = 0;\r\n"
                },
                {
                    "date": 1695036988978,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n import '../models/mail_model.dart';\r\n import '../models/tags_model.dart';\r\n \r\n class SingleTagScreen extends StatefulWidget {\r\n-  List<TagElement> tagsList;\r\n+  int \r\n   SingleTagScreen({\r\n     Key? key,\r\n     required this.tagsList,\r\n   }) : super(key: key);\r\n@@ -19,9 +19,9 @@\n   @override\r\n   State<SingleTagScreen> createState() => _SingleTagScreenState();\r\n }\r\n \r\n-class _TagsScreenState extends State<SingleTagScreen> {\r\n+class _SingleTagScreenState extends State<SingleTagScreen> {\r\n   late Future<List<Mail>> mails;\r\n   List<int> allTagsIds = [];\r\n   Set<int> tagsIdsToBeShown = {};\r\n   int greyIndex = 0;\r\n"
                },
                {
                    "date": 1695036994113,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n import '../models/mail_model.dart';\r\n import '../models/tags_model.dart';\r\n \r\n class SingleTagScreen extends StatefulWidget {\r\n-  int \r\n+  int tagId; \r\n   SingleTagScreen({\r\n     Key? key,\r\n     required this.tagsList,\r\n   }) : super(key: key);\r\n"
                },
                {
                    "date": 1695037035362,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,21 +12,21 @@\n class SingleTagScreen extends StatefulWidget {\r\n   int tagId; \r\n   SingleTagScreen({\r\n     Key? key,\r\n-    required this.tagsList,\r\n+    required this.tagId,\r\n   }) : super(key: key);\r\n \r\n   @override\r\n   State<SingleTagScreen> createState() => _SingleTagScreenState();\r\n }\r\n \r\n class _SingleTagScreenState extends State<SingleTagScreen> {\r\n-  late Future<List<Mail>> mails;\r\n-  List<int> allTagsIds = [];\r\n-  Set<int> tagsIdsToBeShown = {};\r\n-  int greyIndex = 0;\r\n-  bool isAllTagSelected = true;\r\n+  // late Future<List<Mail>> mails;\r\n+  // List<int> allTagsIds = [];\r\n+  // Set<int> tagsIdsToBeShown = {};\r\n+  // int greyIndex = 0;\r\n+  // bool isAllTagSelected = true;\r\n   @override\r\n   void initState() {\r\n     mails = getAllMailsHaveTags(allTagsIds);\r\n     super.initState();\r\n"
                },
                {
                    "date": 1695037042397,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n   // int greyIndex = 0;\r\n   // bool isAllTagSelected = true;\r\n   @override\r\n   void initState() {\r\n-    mails = getAllMailsHaveTags(allTagsIds);\r\n+    mails = getAllMailsHaveTags([allTagsIds]);\r\n     super.initState();\r\n   }\r\n \r\n   @override\r\n"
                },
                {
                    "date": 1695037052122,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,16 +20,16 @@\n   State<SingleTagScreen> createState() => _SingleTagScreenState();\r\n }\r\n \r\n class _SingleTagScreenState extends State<SingleTagScreen> {\r\n-  // late Future<List<Mail>> mails;\r\n+  late Future<List<Mail>> mails;\r\n   // List<int> allTagsIds = [];\r\n   // Set<int> tagsIdsToBeShown = {};\r\n   // int greyIndex = 0;\r\n   // bool isAllTagSelected = true;\r\n   @override\r\n   void initState() {\r\n-    mails = getAllMailsHaveTags([allTagsIds]);\r\n+    mails = getAllMailsHaveTags([widget.tagId]);\r\n     super.initState();\r\n   }\r\n \r\n   @override\r\n"
                },
                {
                    "date": 1695037062527,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,86 +36,9 @@\n   Widget build(BuildContext context) {\r\n     String allTag = 'All Tags';\r\n \r\n     List<Widget>? tagsListForWhiteBox;\r\n-    tagsListForWhiteBox = [\r\n-      GestureDetector(\r\n-        onTap: () {\r\n-          isAllTagSelected = !isAllTagSelected;\r\n-          setState(() {\r\n-            if (isAllTagSelected) {\r\n-              mails = getAllMailsHaveTags(allTagsIds);\r\n-            } else if (tagsIdsToBeShown.isEmpty) {\r\n-              mails = getAllMailsHaveTags([]);\r\n-            } else {\r\n-              mails = getAllMailsHaveTags(tagsIdsToBeShown.toList());\r\n-            }\r\n-          });\r\n-        },\r\n-        child: Container(\r\n-          alignment: Alignment.center,\r\n-          height: 32,\r\n-          width: 40.0 + (allTag.length * 7.0),\r\n-          decoration: BoxDecoration(\r\n-            color: isAllTagSelected\r\n-                ? primaryColor\r\n-                : const Color.fromARGB(255, 208, 207, 207),\r\n-            borderRadius: BorderRadius.circular(30),\r\n-          ),\r\n-          child: Text(\r\n-            'All Tags'.tr(),\r\n-            style: const TextStyle(\r\n-              fontSize: 14,\r\n-              color: Colors.black,\r\n-            ),\r\n-          ),\r\n-        ),\r\n-      ),\r\n-      ...widget.tagsList.map((tag) {\r\n-        allTagsIds.add(tag.id);\r\n-        final tagText = tag.name;\r\n-        final textLength = tagText.length;\r\n-        final tagWidth = 40.0 + (textLength * 8.0);\r\n-        bool isSelected = tagsIdsToBeShown.contains(tag.id);\r\n-        return GestureDetector(\r\n-          onTap: () {\r\n-            setState(() {\r\n-              if (tagsIdsToBeShown.contains(tag.id)) {\r\n-                tagsIdsToBeShown.remove(tag.id);\r\n-              } else {\r\n-                tagsIdsToBeShown.add(tag.id);\r\n-              }\r\n-              if (tagsIdsToBeShown.isNotEmpty && isAllTagSelected == false) {\r\n-                mails = getAllMailsHaveTags(tagsIdsToBeShown.toList());\r\n-              } else if (tagsIdsToBeShown.isEmpty &&\r\n-                  isAllTagSelected == false) {\r\n-                mails = getAllMailsHaveTags([]);\r\n-              } else {\r\n-                mails = getAllMailsHaveTags(allTagsIds);\r\n-              }\r\n-            });\r\n-          },\r\n-          child: Container(\r\n-            alignment: Alignment.center,\r\n-            width: tagWidth,\r\n-            height: 32,\r\n-            decoration: BoxDecoration(\r\n-              color: isSelected\r\n-                  ? primaryColor\r\n-                  : const Color.fromARGB(255, 208, 207, 207),\r\n-              borderRadius: BorderRadius.circular(30),\r\n-            ),\r\n-            child: Text(\r\n-              '#$tagText',\r\n-              style: const TextStyle(\r\n-                fontSize: 14,\r\n-                color: Colors.black,\r\n-              ),\r\n-            ),\r\n-          ),\r\n-        );\r\n-      }).toList(),\r\n-    ];\r\n+    \r\n \r\n     return Scaffold(\r\n       backgroundColor: backGroundColor,\r\n       appBar: AppBar(\r\n"
                },
                {
                    "date": 1695037068677,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n   }\r\n \r\n   @override\r\n   Widget build(BuildContext context) {\r\n-    String allTag = 'All Tags';\r\n+ \r\n \r\n     List<Widget>? tagsListForWhiteBox;\r\n     \r\n \r\n"
                },
                {
                    "date": 1695037095038,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,12 +6,12 @@\n import 'package:flutter/material.dart';\r\n \r\n import '../core/util/constants/colors.dart';\r\n import '../models/mail_model.dart';\r\n-import '../models/tags_model.dart';\r\n \r\n class SingleTagScreen extends StatefulWidget {\r\n-  int tagId; \r\n+  int tagId;\r\n+  String\r\n   SingleTagScreen({\r\n     Key? key,\r\n     required this.tagId,\r\n   }) : super(key: key);\r\n@@ -33,12 +33,9 @@\n   }\r\n \r\n   @override\r\n   Widget build(BuildContext context) {\r\n- \r\n-\r\n     List<Widget>? tagsListForWhiteBox;\r\n-    \r\n \r\n     return Scaffold(\r\n       backgroundColor: backGroundColor,\r\n       appBar: AppBar(\r\n"
                },
                {
                    "date": 1695037104677,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,12 +9,13 @@\n import '../models/mail_model.dart';\r\n \r\n class SingleTagScreen extends StatefulWidget {\r\n   int tagId;\r\n-  String\r\n+  String tagName;\r\n   SingleTagScreen({\r\n     Key? key,\r\n     required this.tagId,\r\n+     required this.tagId,\r\n   }) : super(key: key);\r\n \r\n   @override\r\n   State<SingleTagScreen> createState() => _SingleTagScreenState();\r\n"
                },
                {
                    "date": 1695037114860,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n   String tagName;\r\n   SingleTagScreen({\r\n     Key? key,\r\n     required this.tagId,\r\n-     required this.tagId,\r\n+     required this.tagName,\r\n   }) : super(key: key);\r\n \r\n   @override\r\n   State<SingleTagScreen> createState() => _SingleTagScreenState();\r\n@@ -40,9 +40,9 @@\n     return Scaffold(\r\n       backgroundColor: backGroundColor,\r\n       appBar: AppBar(\r\n         title: Text(\r\n-          'Tags'.tr(),\r\n+          widget..tr(),\r\n           style: const TextStyle(\r\n               color: Colors.black, fontSize: 18, fontWeight: FontWeight.bold),\r\n         ),\r\n         centerTitle: true,\r\n"
                },
                {
                    "date": 1695037123763,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n     return Scaffold(\r\n       backgroundColor: backGroundColor,\r\n       appBar: AppBar(\r\n         title: Text(\r\n-          widget..tr(),\r\n+          widget.tagName,\r\n           style: const TextStyle(\r\n               color: Colors.black, fontSize: 18, fontWeight: FontWeight.bold),\r\n         ),\r\n         centerTitle: true,\r\n"
                },
                {
                    "date": 1695037148258,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,21 +60,9 @@\n       ),\r\n       body: SingleChildScrollView(\r\n         child: Column(\r\n           children: [\r\n-            CustomWhiteBox(\r\n-                width: double.infinity,\r\n-                height: (widget.tagsList.length / 2).round() * 46,\r\n-                child: Padding(\r\n-                  padding: const EdgeInsetsDirectional.only(start: 8.0, top: 8),\r\n-                  child: Wrap(\r\n-                      spacing: 10.0,\r\n-                      runSpacing: 10.0,\r\n-                      children: tagsListForWhiteBox),\r\n-                )),\r\n-            const Divider(\r\n-              thickness: 1,\r\n-            ),\r\n+             \r\n             SizedBox(\r\n               height: MediaQuery.of(context).size.height -\r\n                   ((widget.tagsList.length / 2).round() * 52),\r\n               child: FutureBuilder(\r\n"
                },
                {
                    "date": 1695037176137,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,7 @@\n // ignore_for_file: public_member_api_docs, sort_constructors_first, must_be_immutable\r\n-import 'package:easy_localization/easy_localization.dart';\r\n import 'package:final_projectt/core/services/tags_controller.dart';\r\n import 'package:final_projectt/core/widgets/card.dart';\r\n-import 'package:final_projectt/core/widgets/custom_box.dart';\r\n import 'package:flutter/material.dart';\r\n \r\n import '../core/util/constants/colors.dart';\r\n import '../models/mail_model.dart';\r\n@@ -13,9 +11,9 @@\n   String tagName;\r\n   SingleTagScreen({\r\n     Key? key,\r\n     required this.tagId,\r\n-     required this.tagName,\r\n+    required this.tagName,\r\n   }) : super(key: key);\r\n \r\n   @override\r\n   State<SingleTagScreen> createState() => _SingleTagScreenState();\r\n@@ -60,35 +58,30 @@\n       ),\r\n       body: SingleChildScrollView(\r\n         child: Column(\r\n           children: [\r\n-             \r\n-            SizedBox(\r\n-              height: MediaQuery.of(context).size.height -\r\n-                  ((widget.tagsList.length / 2).round() * 52),\r\n-              child: FutureBuilder(\r\n-                  future: mails,\r\n-                  builder: (context, snapshot) {\r\n-                    if (snapshot.hasData) {\r\n-                      return ListView.builder(\r\n-                          itemCount: snapshot.data!.length,\r\n-                          itemBuilder: (context, index) {\r\n-                            return myCustomCard(\r\n-                              snapshot.data![index],\r\n-                              () {},\r\n-                            );\r\n-                          });\r\n-                    }\r\n-                    if (snapshot.hasError) {\r\n-                      return Text(snapshot.error.toString());\r\n-                    }\r\n-                    return Center(\r\n-                      child: CircularProgressIndicator(\r\n-                        color: primaryColor,\r\n-                      ),\r\n-                    );\r\n-                  }),\r\n-            ),\r\n+            FutureBuilder(\r\n+                future: mails,\r\n+                builder: (context, snapshot) {\r\n+                  if (snapshot.hasData) {\r\n+                    return ListView.builder(\r\n+                        itemCount: snapshot.data!.length,\r\n+                        itemBuilder: (context, index) {\r\n+                          return myCustomCard(\r\n+                            snapshot.data![index],\r\n+                            () {},\r\n+                          );\r\n+                        });\r\n+                  }\r\n+                  if (snapshot.hasError) {\r\n+                    return Text(snapshot.error.toString());\r\n+                  }\r\n+                  return Center(\r\n+                    child: CircularProgressIndicator(\r\n+                      color: primaryColor,\r\n+                    ),\r\n+                  );\r\n+                }),\r\n           ],\r\n         ),\r\n       ),\r\n     );\r\n"
                },
                {
                    "date": 1695037363855,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,30 +58,32 @@\n       ),\r\n       body: SingleChildScrollView(\r\n         child: Column(\r\n           children: [\r\n-            FutureBuilder(\r\n-                future: mails,\r\n-                builder: (context, snapshot) {\r\n-                  if (snapshot.hasData) {\r\n-                    return ListView.builder(\r\n-                        itemCount: snapshot.data!.length,\r\n-                        itemBuilder: (context, index) {\r\n-                          return myCustomCard(\r\n-                            snapshot.data![index],\r\n-                            () {},\r\n-                          );\r\n-                        });\r\n-                  }\r\n-                  if (snapshot.hasError) {\r\n-                    return Text(snapshot.error.toString());\r\n-                  }\r\n-                  return Center(\r\n-                    child: CircularProgressIndicator(\r\n-                      color: primaryColor,\r\n-                    ),\r\n-                  );\r\n-                }),\r\n+            SizedBox(\r\n+              child: FutureBuilder(\r\n+                  future: mails,\r\n+                  builder: (context, snapshot) {\r\n+                    if (snapshot.hasData) {\r\n+                      return ListView.builder(\r\n+                          itemCount: snapshot.data!.length,\r\n+                          itemBuilder: (context, index) {\r\n+                            return myCustomCard(\r\n+                              snapshot.data![index],\r\n+                              () {},\r\n+                            );\r\n+                          });\r\n+                    }\r\n+                    if (snapshot.hasError) {\r\n+                      return Text(snapshot.error.toString());\r\n+                    }\r\n+                    return Center(\r\n+                      child: CircularProgressIndicator(\r\n+                        color: primaryColor,\r\n+                      ),\r\n+                    );\r\n+                  }),\r\n+            ),\r\n           ],\r\n         ),\r\n       ),\r\n     );\r\n"
                },
                {
                    "date": 1695037369425,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,9 @@\n       body: SingleChildScrollView(\r\n         child: Column(\r\n           children: [\r\n             SizedBox(\r\n-              height: ,\r\n+              height: 500,\r\n               child: FutureBuilder(\r\n                   future: mails,\r\n                   builder: (context, snapshot) {\r\n                     if (snapshot.hasData) {\r\n"
                },
                {
                    "date": 1695037409821,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,9 @@\n       body: SingleChildScrollView(\r\n         child: Column(\r\n           children: [\r\n             SizedBox(\r\n-              height: MediaQuery.of(context).size.height - 50,\r\n+              height: MediaQuery.of(context).size.height ,\r\n               child: FutureBuilder(\r\n                   future: mails,\r\n                   builder: (context, snapshot) {\r\n                     if (snapshot.hasData) {\r\n"
                }
            ],
            "date": 1695036954459,
            "name": "Commit-0",
            "content": "// ignore_for_file: public_member_api_docs, sort_constructors_first, must_be_immutable\r\nimport 'package:easy_localization/easy_localization.dart';\r\nimport 'package:final_projectt/core/services/tags_controller.dart';\r\nimport 'package:final_projectt/core/widgets/card.dart';\r\nimport 'package:final_projectt/core/widgets/custom_box.dart';\r\nimport 'package:flutter/material.dart';\r\n\r\nimport '../core/util/constants/colors.dart';\r\nimport '../models/mail_model.dart';\r\nimport '../models/tags_model.dart';\r\n\r\nclass TagsScreen extends StatefulWidget {\r\n  List<TagElement> tagsList;\r\n  TagsScreen({\r\n    Key? key,\r\n    required this.tagsList,\r\n  }) : super(key: key);\r\n\r\n  @override\r\n  State<TagsScreen> createState() => _TagsScreenState();\r\n}\r\n\r\nclass _TagsScreenState extends State<TagsScreen> {\r\n  late Future<List<Mail>> mails;\r\n  List<int> allTagsIds = [];\r\n  Set<int> tagsIdsToBeShown = {};\r\n  int greyIndex = 0;\r\n  bool isAllTagSelected = true;\r\n  @override\r\n  void initState() {\r\n    mails = getAllMailsHaveTags(allTagsIds);\r\n    super.initState();\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    String allTag = 'All Tags';\r\n\r\n    List<Widget>? tagsListForWhiteBox;\r\n    tagsListForWhiteBox = [\r\n      GestureDetector(\r\n        onTap: () {\r\n          isAllTagSelected = !isAllTagSelected;\r\n          setState(() {\r\n            if (isAllTagSelected) {\r\n              mails = getAllMailsHaveTags(allTagsIds);\r\n            } else if (tagsIdsToBeShown.isEmpty) {\r\n              mails = getAllMailsHaveTags([]);\r\n            } else {\r\n              mails = getAllMailsHaveTags(tagsIdsToBeShown.toList());\r\n            }\r\n          });\r\n        },\r\n        child: Container(\r\n          alignment: Alignment.center,\r\n          height: 32,\r\n          width: 40.0 + (allTag.length * 7.0),\r\n          decoration: BoxDecoration(\r\n            color: isAllTagSelected\r\n                ? primaryColor\r\n                : const Color.fromARGB(255, 208, 207, 207),\r\n            borderRadius: BorderRadius.circular(30),\r\n          ),\r\n          child: Text(\r\n            'All Tags'.tr(),\r\n            style: const TextStyle(\r\n              fontSize: 14,\r\n              color: Colors.black,\r\n            ),\r\n          ),\r\n        ),\r\n      ),\r\n      ...widget.tagsList.map((tag) {\r\n        allTagsIds.add(tag.id);\r\n        final tagText = tag.name;\r\n        final textLength = tagText.length;\r\n        final tagWidth = 40.0 + (textLength * 8.0);\r\n        bool isSelected = tagsIdsToBeShown.contains(tag.id);\r\n        return GestureDetector(\r\n          onTap: () {\r\n            setState(() {\r\n              if (tagsIdsToBeShown.contains(tag.id)) {\r\n                tagsIdsToBeShown.remove(tag.id);\r\n              } else {\r\n                tagsIdsToBeShown.add(tag.id);\r\n              }\r\n              if (tagsIdsToBeShown.isNotEmpty && isAllTagSelected == false) {\r\n                mails = getAllMailsHaveTags(tagsIdsToBeShown.toList());\r\n              } else if (tagsIdsToBeShown.isEmpty &&\r\n                  isAllTagSelected == false) {\r\n                mails = getAllMailsHaveTags([]);\r\n              } else {\r\n                mails = getAllMailsHaveTags(allTagsIds);\r\n              }\r\n            });\r\n          },\r\n          child: Container(\r\n            alignment: Alignment.center,\r\n            width: tagWidth,\r\n            height: 32,\r\n            decoration: BoxDecoration(\r\n              color: isSelected\r\n                  ? primaryColor\r\n                  : const Color.fromARGB(255, 208, 207, 207),\r\n              borderRadius: BorderRadius.circular(30),\r\n            ),\r\n            child: Text(\r\n              '#$tagText',\r\n              style: const TextStyle(\r\n                fontSize: 14,\r\n                color: Colors.black,\r\n              ),\r\n            ),\r\n          ),\r\n        );\r\n      }).toList(),\r\n    ];\r\n\r\n    return Scaffold(\r\n      backgroundColor: backGroundColor,\r\n      appBar: AppBar(\r\n        title: Text(\r\n          'Tags'.tr(),\r\n          style: const TextStyle(\r\n              color: Colors.black, fontSize: 18, fontWeight: FontWeight.bold),\r\n        ),\r\n        centerTitle: true,\r\n        backgroundColor: backGroundColor,\r\n        elevation: 0,\r\n        leading: GestureDetector(\r\n          onTap: () {\r\n            Navigator.pop(context, true);\r\n          },\r\n          child: Icon(\r\n            Icons.arrow_back_ios,\r\n            color: primaryColor,\r\n          ),\r\n        ),\r\n      ),\r\n      body: SingleChildScrollView(\r\n        child: Column(\r\n          children: [\r\n            CustomWhiteBox(\r\n                width: double.infinity,\r\n                height: (widget.tagsList.length / 2).round() * 46,\r\n                child: Padding(\r\n                  padding: const EdgeInsetsDirectional.only(start: 8.0, top: 8),\r\n                  child: Wrap(\r\n                      spacing: 10.0,\r\n                      runSpacing: 10.0,\r\n                      children: tagsListForWhiteBox),\r\n                )),\r\n            const Divider(\r\n              thickness: 1,\r\n            ),\r\n            SizedBox(\r\n              height: MediaQuery.of(context).size.height -\r\n                  ((widget.tagsList.length / 2).round() * 52),\r\n              child: FutureBuilder(\r\n                  future: mails,\r\n                  builder: (context, snapshot) {\r\n                    if (snapshot.hasData) {\r\n                      return ListView.builder(\r\n                          itemCount: snapshot.data!.length,\r\n                          itemBuilder: (context, index) {\r\n                            return myCustomCard(\r\n                              snapshot.data![index],\r\n                              () {},\r\n                            );\r\n                          });\r\n                    }\r\n                    if (snapshot.hasError) {\r\n                      return Text(snapshot.error.toString());\r\n                    }\r\n                    return Center(\r\n                      child: CircularProgressIndicator(\r\n                        color: primaryColor,\r\n                      ),\r\n                    );\r\n                  }),\r\n            ),\r\n          ],\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n"
        }
    ]
}