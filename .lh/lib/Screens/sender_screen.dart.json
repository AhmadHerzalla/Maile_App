{
    "sourceFile": "lib/Screens/sender_screen.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 14,
            "patches": [
                {
                    "date": 1695334278579,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1695334309227,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -145,9 +145,9 @@\n             future: senders,\r\n             builder: (context, snapshot) {\r\n               if (snapshot.connectionState == ConnectionState.waiting) {\r\n                 return const Center(\r\n-                  child: CircularProgressIndicator(),\r\n+                  child: Spin(),\r\n                 );\r\n               } else if (snapshot.hasError) {\r\n                 return Text(snapshot.error.toString());\r\n               } else if (!snapshot.hasData) {\r\n"
                },
                {
                    "date": 1695334317672,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -145,9 +145,9 @@\n             future: senders,\r\n             builder: (context, snapshot) {\r\n               if (snapshot.connectionState == ConnectionState.waiting) {\r\n                 return const Center(\r\n-                  child: Spin(),\r\n+                  child: SpinKitFading(),\r\n                 );\r\n               } else if (snapshot.hasError) {\r\n                 return Text(snapshot.error.toString());\r\n               } else if (!snapshot.hasData) {\r\n"
                },
                {
                    "date": 1695334323384,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,9 @@\n import 'package:final_projectt/core/widgets/show_alert.dart';\r\n import 'package:final_projectt/models/sender_model.dart';\r\n import 'package:flutter/material.dart';\r\n import 'package:flutter_slidable/flutter_slidable.dart';\r\n+import 'package:flutter_spinkit/flutter_spinkit.dart';\r\n \r\n \r\n class SendersScreen extends StatefulWidget {\r\n   const SendersScreen({super.key});\r\n@@ -145,9 +146,9 @@\n             future: senders,\r\n             builder: (context, snapshot) {\r\n               if (snapshot.connectionState == ConnectionState.waiting) {\r\n                 return const Center(\r\n-                  child: SpinKitFading(),\r\n+                  child: SpinKitFadingCube(),\r\n                 );\r\n               } else if (snapshot.hasError) {\r\n                 return Text(snapshot.error.toString());\r\n               } else if (!snapshot.hasData) {\r\n"
                },
                {
                    "date": 1695334329966,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,933 @@\n+import 'package:easy_localization/easy_localization.dart';\r\n+import 'package:final_projectt/Screens/sender_mails.dart';\r\n+import 'package:final_projectt/core/services/all_user_controller.dart';\r\n+import 'package:final_projectt/core/services/new_inbox_controller.dart';\r\n+import 'package:final_projectt/core/util/constants/colors.dart';\r\n+import 'package:final_projectt/core/widgets/edit_sender_dialouge.dart';\r\n+import 'package:final_projectt/core/widgets/show_alert.dart';\r\n+import 'package:final_projectt/models/sender_model.dart';\r\n+import 'package:flutter/material.dart';\r\n+import 'package:flutter_slidable/flutter_slidable.dart';\r\n+import 'package:flutter_spinkit/flutter_spinkit.dart';\r\n+\r\n+\r\n+class SendersScreen extends StatefulWidget {\r\n+  const SendersScreen({super.key});\r\n+\r\n+  @override\r\n+  State<SendersScreen> createState() => _SendersScreenState();\r\n+}\r\n+\r\n+class _SendersScreenState extends State<SendersScreen> {\r\n+  TextEditingController searchTextField = TextEditingController();\r\n+  late Future<Senders> senders;\r\n+  late Map<String, SingleSender> searchMap = {};\r\n+  List<MapEntry<String, SingleSender>> matchingPairs = [];\r\n+\r\n+  dynamic sendersData;\r\n+\r\n+  @override\r\n+  void initState() {\r\n+    senders = getSenders();\r\n+    initializeData();\r\n+    super.initState();\r\n+  }\r\n+\r\n+  Future<Map<String, SingleSender>> initializeData() async {\r\n+    final sendersData = (await getSenders()).data;\r\n+\r\n+    for (SingleSender sender in sendersData!) {\r\n+      searchMap[sender.name!] = sender;\r\n+    }\r\n+    return searchMap;\r\n+  }\r\n+\r\n+  void searchSenders(String target) {\r\n+    String substring = target.toLowerCase();\r\n+    matchingPairs.clear(); // Clear the previous results\r\n+\r\n+    searchMap.forEach((key, singleSender) {\r\n+      String nameLower = singleSender.name!.toLowerCase();\r\n+\r\n+      if (nameLower.contains(substring)) {\r\n+        matchingPairs.add(MapEntry(key, singleSender));\r\n+      }\r\n+    });\r\n+\r\n+    setState(() {});\r\n+  }\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    return Scaffold(\r\n+        body: Column(\r\n+      children: [\r\n+        Padding(\r\n+          padding:\r\n+              const EdgeInsetsDirectional.only(top: 40, start: 15, end: 15),\r\n+          child: Column(\r\n+            children: [\r\n+              Row(\r\n+                mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n+                children: [\r\n+                  IconButton(\r\n+                    onPressed: () {\r\n+                      Navigator.pop(context);\r\n+                    },\r\n+                    icon: Icon(\r\n+                      Icons.arrow_back_ios_new_rounded,\r\n+                      color: primaryColor,\r\n+                    ),\r\n+                  ),\r\n+                  Text(\r\n+                    \"Senders\".tr(),\r\n+                    style: const TextStyle(\r\n+                      color: Colors.black,\r\n+                      fontSize: 20,\r\n+                    ),\r\n+                  ),\r\n+                  IconButton(\r\n+                    onPressed: () {},\r\n+                    icon: const Icon(\r\n+                      Icons.arrow_back_ios_new_rounded,\r\n+                      color: Colors.transparent,\r\n+                    ),\r\n+                  ),\r\n+                ],\r\n+              ),\r\n+              Padding(\r\n+                padding: const EdgeInsetsDirectional.only(start: 10, end: 10),\r\n+                child: Column(\r\n+                  crossAxisAlignment: CrossAxisAlignment.start,\r\n+                  mainAxisAlignment: MainAxisAlignment.start,\r\n+                  children: [\r\n+                    Padding(\r\n+                      padding: const EdgeInsetsDirectional.only(top: 5),\r\n+                      child: TextField(\r\n+                        controller: searchTextField,\r\n+                        onChanged: (value) {\r\n+                          searchSenders(value);\r\n+                        },\r\n+                        decoration: InputDecoration(\r\n+                          prefixIcon: const Icon(Icons.search_rounded),\r\n+                          suffixIcon: IconButton(\r\n+                            onPressed: () {\r\n+                              setState(() {\r\n+                                searchTextField.clear();\r\n+                              });\r\n+                            },\r\n+                            icon: const Icon(Icons.cancel),\r\n+                          ),\r\n+                          filled: true,\r\n+                          fillColor: Colors.black.withOpacity(0.05),\r\n+                          contentPadding: const EdgeInsets.all(15),\r\n+                          hintText: \"Search ...\".tr(),\r\n+                          hintStyle:\r\n+                              const TextStyle(color: Colors.grey, fontSize: 19),\r\n+                          enabledBorder: UnderlineInputBorder(\r\n+                            borderSide: BorderSide(color: backGroundColor),\r\n+                            borderRadius: BorderRadius.circular(30),\r\n+                          ),\r\n+                          focusedBorder: UnderlineInputBorder(\r\n+                            borderRadius: BorderRadius.circular(30),\r\n+                            borderSide: BorderSide(color: backGroundColor),\r\n+                          ),\r\n+                        ),\r\n+                      ),\r\n+                    ),\r\n+                  ],\r\n+                ),\r\n+              ),\r\n+            ],\r\n+          ),\r\n+        ),\r\n+        Expanded(\r\n+          child: FutureBuilder(\r\n+            future: senders,\r\n+            builder: (context, snapshot) {\r\n+              if (snapshot.connectionState == ConnectionState.waiting) {\r\n+                return   Center(\r\n+                  child: SpinKitW(),\r\n+                );\r\n+              } else if (snapshot.hasError) {\r\n+                return Text(snapshot.error.toString());\r\n+              } else if (!snapshot.hasData) {\r\n+                return const Center(\r\n+                  child: Text('No data available.'),\r\n+                );\r\n+              }\r\n+\r\n+              sendersData = snapshot.data as Senders;\r\n+              final categorizedSenders = categorizeSenders(sendersData);\r\n+              if (matchingPairs.isEmpty && searchTextField.text.isNotEmpty) {\r\n+                return Center(\r\n+                  child: Column(\r\n+                    mainAxisAlignment: MainAxisAlignment.center,\r\n+                    crossAxisAlignment: CrossAxisAlignment.center,\r\n+                    children: [\r\n+                      Align(\r\n+                        alignment: Alignment.center,\r\n+                        child: Image.asset('images/result_not_found.png',\r\n+                            fit: BoxFit.cover, height: 250),\r\n+                      ),\r\n+                      const SizedBox(\r\n+                        height: 70,\r\n+                      )\r\n+                    ],\r\n+                  ),\r\n+                );\r\n+              }\r\n+              return ListView.separated(\r\n+                padding: EdgeInsets.zero,\r\n+                separatorBuilder: (context, index) {\r\n+                  return const SizedBox(\r\n+                    height: 10,\r\n+                  );\r\n+                },\r\n+                physics: const BouncingScrollPhysics(),\r\n+                itemCount: categorizedSenders.length,\r\n+                itemBuilder: (context, sectionIndex) {\r\n+                  final category =\r\n+                      categorizedSenders.keys.elementAt(sectionIndex);\r\n+                  final categorySenders = categorizedSenders[category]!;\r\n+\r\n+                  // Filter the matchingPairs for the current category and search term\r\n+                  final filteredMatchingPairs = matchingPairs.where((entry) {\r\n+                    final sender = entry.value;\r\n+                    final senderCategory = sender.category!.name!.toLowerCase();\r\n+                    final senderName = sender.name!.toLowerCase();\r\n+                    final searchTerm = searchTextField.text.toLowerCase();\r\n+\r\n+                    return senderCategory == category.toLowerCase() &&\r\n+                        (senderName.contains(searchTerm) ||\r\n+                            sender.mobile!.contains(searchTerm));\r\n+                  }).toList();\r\n+\r\n+                  // Check if the section is empty, and skip it if so\r\n+                  if ((filteredMatchingPairs.isEmpty &&\r\n+                          categorySenders.isEmpty) ||\r\n+                      (filteredMatchingPairs.isEmpty &&\r\n+                          searchTextField.text.isNotEmpty)) {\r\n+                    return const SizedBox.shrink(); // Hide the empty section\r\n+                  }\r\n+\r\n+                  return Padding(\r\n+                    padding: const EdgeInsets.only(right: 12.0, left: 12),\r\n+                    child: Column(\r\n+                      children: [\r\n+                        Column(\r\n+                            crossAxisAlignment: CrossAxisAlignment.start,\r\n+                            mainAxisAlignment: MainAxisAlignment.start,\r\n+                            children: [\r\n+                              Column(\r\n+                                  crossAxisAlignment: CrossAxisAlignment.start,\r\n+                                  mainAxisAlignment: MainAxisAlignment.start,\r\n+                                  children: [\r\n+                                    Padding(\r\n+                                      padding: const EdgeInsetsDirectional.only(\r\n+                                        top: 20.0,\r\n+                                        start: 5,\r\n+                                      ),\r\n+                                      child: Text(\r\n+                                        category.tr(),\r\n+                                        style: const TextStyle(\r\n+                                          fontSize: 20,\r\n+                                          fontWeight: FontWeight.w600,\r\n+                                        ),\r\n+                                      ),\r\n+                                    ),\r\n+                                    Container(\r\n+                                      margin: const EdgeInsets.only(top: 10),\r\n+                                      width: MediaQuery.of(context).size.width,\r\n+                                      height: 1,\r\n+                                      color: Colors.grey.shade300,\r\n+                                    )\r\n+                                  ]),\r\n+                            ]),\r\n+                        ListView.builder(\r\n+                          padding: EdgeInsets.zero,\r\n+                          shrinkWrap: true,\r\n+                          physics: const NeverScrollableScrollPhysics(),\r\n+                          itemCount: searchTextField.text.isNotEmpty\r\n+                              ? filteredMatchingPairs.length\r\n+                              : categorySenders.length,\r\n+                          itemBuilder: (context, itemIndex) {\r\n+                            final entry = searchTextField.text.isNotEmpty &&\r\n+                                    itemIndex < filteredMatchingPairs.length\r\n+                                ? filteredMatchingPairs[itemIndex]\r\n+                                : null;\r\n+\r\n+                            final sender = searchTextField.text.isEmpty &&\r\n+                                    itemIndex < categorySenders.length\r\n+                                ? categorySenders[itemIndex]\r\n+                                : null;\r\n+\r\n+                            if (entry != null) {\r\n+                              return Slidable(\r\n+                                endActionPane: ActionPane(\r\n+                                    extentRatio: 0.44,\r\n+                                    motion: const ScrollMotion(),\r\n+                                    children: [\r\n+                                      CustomSlidableAction(\r\n+                                        backgroundColor: Theme.of(context)\r\n+                                            .scaffoldBackgroundColor,\r\n+                                        padding:\r\n+                                            const EdgeInsets.only(left: 30),\r\n+                                        onPressed: (context) {\r\n+                                          showDialog(\r\n+                                            barrierDismissible: false,\r\n+                                            context: context,\r\n+                                            builder: (BuildContext context) {\r\n+                                              return AlertDialog(\r\n+                                                backgroundColor: Colors.white,\r\n+                                                title: SizedBox(\r\n+                                                  width: 290,\r\n+                                                  child: Text(\r\n+                                                    'Do you want really to delete \"${entry.value.name}\" ?',\r\n+                                                    style: const TextStyle(\r\n+                                                      color: Colors.black,\r\n+                                                      fontWeight:\r\n+                                                          FontWeight.w600,\r\n+                                                      fontSize: 20,\r\n+                                                    ),\r\n+                                                  ),\r\n+                                                ),\r\n+                                                actions: [\r\n+                                                  TextButton(\r\n+                                                    onPressed: () {\r\n+                                                      Navigator.pop(context);\r\n+                                                    },\r\n+                                                    child: const Text(\r\n+                                                      'Cancel',\r\n+                                                      style: TextStyle(\r\n+                                                        color: Colors.black,\r\n+                                                        fontWeight:\r\n+                                                            FontWeight.w500,\r\n+                                                        fontSize: 17,\r\n+                                                      ),\r\n+                                                    ),\r\n+                                                  ),\r\n+                                                  TextButton(\r\n+                                                    onPressed: () async {\r\n+                                                      await deleteSender(\r\n+                                                              entry.value.id!)!\r\n+                                                          .then((statusCode) {\r\n+                                                        if (statusCode == 200) {\r\n+                                                          ScaffoldMessenger.of(\r\n+                                                                  context)\r\n+                                                              .showSnackBar(\r\n+                                                                  SnackBar(\r\n+                                                            content:\r\n+                                                                const Center(\r\n+                                                              child: Text(\r\n+                                                                'Deleted Successfully',\r\n+                                                                style: TextStyle(\r\n+                                                                    fontSize:\r\n+                                                                        15,\r\n+                                                                    fontWeight:\r\n+                                                                        FontWeight\r\n+                                                                            .w500),\r\n+                                                              ),\r\n+                                                            ),\r\n+                                                            backgroundColor:\r\n+                                                                primaryColor\r\n+                                                                    .withOpacity(\r\n+                                                                        0.7),\r\n+                                                            duration:\r\n+                                                                const Duration(\r\n+                                                                    seconds: 2),\r\n+                                                            width: 190,\r\n+                                                            elevation: 0,\r\n+                                                            behavior:\r\n+                                                                SnackBarBehavior\r\n+                                                                    .floating,\r\n+                                                          ));\r\n+                                                          setState(() {\r\n+                                                            senders =\r\n+                                                                getSenders();\r\n+                                                            initializeData();\r\n+                                                            Navigator.pop(\r\n+                                                                context);\r\n+                                                          });\r\n+                                                        } else {\r\n+                                                          ScaffoldMessenger.of(\r\n+                                                                  context)\r\n+                                                              .showSnackBar(\r\n+                                                                  const SnackBar(\r\n+                                                            content: Center(\r\n+                                                              child: Text(\r\n+                                                                'Something went wrong',\r\n+                                                                style: TextStyle(\r\n+                                                                    fontSize:\r\n+                                                                        15,\r\n+                                                                    fontWeight:\r\n+                                                                        FontWeight\r\n+                                                                            .w500),\r\n+                                                              ),\r\n+                                                            ),\r\n+                                                            backgroundColor:\r\n+                                                                Colors\r\n+                                                                    .redAccent,\r\n+                                                            duration: Duration(\r\n+                                                                seconds: 2),\r\n+                                                            width: 190,\r\n+                                                            elevation: 0,\r\n+                                                            behavior:\r\n+                                                                SnackBarBehavior\r\n+                                                                    .floating,\r\n+                                                          ));\r\n+                                                          Navigator.pop(\r\n+                                                              context);\r\n+                                                        }\r\n+                                                      });\r\n+                                                    },\r\n+                                                    child: const Text(\r\n+                                                      'OK',\r\n+                                                      style: TextStyle(\r\n+                                                        color: Colors.black,\r\n+                                                        fontWeight:\r\n+                                                            FontWeight.w500,\r\n+                                                        fontSize: 17,\r\n+                                                      ),\r\n+                                                    ),\r\n+                                                  ),\r\n+                                                ],\r\n+                                              );\r\n+                                            },\r\n+                                          );\r\n+                                        },\r\n+                                        child: Row(\r\n+                                          children: [\r\n+                                            Container(\r\n+                                              height: 50,\r\n+                                              width: 50,\r\n+                                              decoration: BoxDecoration(\r\n+                                                  color: Colors.red,\r\n+                                                  borderRadius:\r\n+                                                      BorderRadius.circular(\r\n+                                                          15)),\r\n+                                              child: const Center(\r\n+                                                child: Icon(\r\n+                                                  Icons.delete,\r\n+                                                  color: Colors.white,\r\n+                                                  size: 35,\r\n+                                                ),\r\n+                                              ),\r\n+                                            ),\r\n+                                          ],\r\n+                                        ),\r\n+                                      ),\r\n+                                      CustomSlidableAction(\r\n+                                        backgroundColor: Theme.of(context)\r\n+                                            .scaffoldBackgroundColor,\r\n+                                        padding: EdgeInsets.zero,\r\n+                                        onPressed: (context) {\r\n+                                          showDialog(\r\n+                                            barrierDismissible: false,\r\n+                                            context: context,\r\n+                                            builder: (BuildContext context) {\r\n+                                              return AlertDialog(\r\n+                                                backgroundColor: Colors.white,\r\n+                                                title: SizedBox(\r\n+                                                  width: 290,\r\n+                                                  child: Text(\r\n+                                                    'Do you want really to delete \"${entry.value.name}\" ?',\r\n+                                                    style: const TextStyle(\r\n+                                                      color: Colors.black,\r\n+                                                      fontWeight:\r\n+                                                          FontWeight.w600,\r\n+                                                      fontSize: 20,\r\n+                                                    ),\r\n+                                                  ),\r\n+                                                ),\r\n+                                                actions: [\r\n+                                                  TextButton(\r\n+                                                    onPressed: () {\r\n+                                                      Navigator.pop(context);\r\n+                                                    },\r\n+                                                    child: const Text(\r\n+                                                      'Cancel',\r\n+                                                      style: TextStyle(\r\n+                                                        color: Colors.black,\r\n+                                                        fontWeight:\r\n+                                                            FontWeight.w500,\r\n+                                                        fontSize: 17,\r\n+                                                      ),\r\n+                                                    ),\r\n+                                                  ),\r\n+                                                  TextButton(\r\n+                                                    onPressed: () async {\r\n+                                                      await deleteSender(\r\n+                                                              entry.value.id!)!\r\n+                                                          .then((statusCode) {\r\n+                                                        if (statusCode == 200) {\r\n+                                                          ScaffoldMessenger.of(\r\n+                                                                  context)\r\n+                                                              .showSnackBar(\r\n+                                                                  SnackBar(\r\n+                                                            content:\r\n+                                                                const Center(\r\n+                                                              child: Text(\r\n+                                                                'Deleted Successfully',\r\n+                                                                style: TextStyle(\r\n+                                                                    fontSize:\r\n+                                                                        15,\r\n+                                                                    fontWeight:\r\n+                                                                        FontWeight\r\n+                                                                            .w500),\r\n+                                                              ),\r\n+                                                            ),\r\n+                                                            backgroundColor:\r\n+                                                                primaryColor\r\n+                                                                    .withOpacity(\r\n+                                                                        0.7),\r\n+                                                            duration:\r\n+                                                                const Duration(\r\n+                                                                    seconds: 2),\r\n+                                                            width: 190,\r\n+                                                            elevation: 0,\r\n+                                                            behavior:\r\n+                                                                SnackBarBehavior\r\n+                                                                    .floating,\r\n+                                                          ));\r\n+                                                          setState(() {\r\n+                                                            senders =\r\n+                                                                getSenders();\r\n+                                                            initializeData();\r\n+                                                            Navigator.pop(\r\n+                                                                context);\r\n+                                                          });\r\n+                                                        } else {\r\n+                                                          ScaffoldMessenger.of(\r\n+                                                                  context)\r\n+                                                              .showSnackBar(\r\n+                                                                  const SnackBar(\r\n+                                                            content: Center(\r\n+                                                              child: Text(\r\n+                                                                'Something went wrong',\r\n+                                                                style: TextStyle(\r\n+                                                                    fontSize:\r\n+                                                                        15,\r\n+                                                                    fontWeight:\r\n+                                                                        FontWeight\r\n+                                                                            .w500),\r\n+                                                              ),\r\n+                                                            ),\r\n+                                                            backgroundColor:\r\n+                                                                Colors\r\n+                                                                    .redAccent,\r\n+                                                            duration: Duration(\r\n+                                                                seconds: 2),\r\n+                                                            width: 190,\r\n+                                                            elevation: 0,\r\n+                                                            behavior:\r\n+                                                                SnackBarBehavior\r\n+                                                                    .floating,\r\n+                                                          ));\r\n+                                                          Navigator.pop(\r\n+                                                              context);\r\n+                                                        }\r\n+                                                      });\r\n+                                                    },\r\n+                                                    child: const Text(\r\n+                                                      'OK',\r\n+                                                      style: TextStyle(\r\n+                                                        color: Colors.black,\r\n+                                                        fontWeight:\r\n+                                                            FontWeight.w500,\r\n+                                                        fontSize: 17,\r\n+                                                      ),\r\n+                                                    ),\r\n+                                                  ),\r\n+                                                ],\r\n+                                              );\r\n+                                            },\r\n+                                          );\r\n+                                        },\r\n+                                        child: Container(\r\n+                                          height: 50,\r\n+                                          width: 50,\r\n+                                          decoration: BoxDecoration(\r\n+                                              color: Colors.amber,\r\n+                                              borderRadius:\r\n+                                                  BorderRadius.circular(15)),\r\n+                                          child: const Center(\r\n+                                            child: Icon(\r\n+                                              Icons.edit,\r\n+                                              color: Colors.white,\r\n+                                              size: 35,\r\n+                                            ),\r\n+                                          ),\r\n+                                        ),\r\n+                                      ),\r\n+                                    ]),\r\n+                                child: ListTile(\r\n+                                  onTap: () {\r\n+                                    setState(() {\r\n+                                      Navigator.push(context, MaterialPageRoute(\r\n+                                        builder: (context) {\r\n+                                          return SenderMails(sender: sender);\r\n+                                        },\r\n+                                      ));\r\n+                                    });\r\n+                                  },\r\n+                                  title: Row(\r\n+                                    children: [\r\n+                                      const SizedBox(\r\n+                                        width: 30,\r\n+                                      ),\r\n+                                      const Icon(Icons.person_3_outlined),\r\n+                                      const SizedBox(\r\n+                                        width: 30,\r\n+                                      ),\r\n+                                      Column(\r\n+                                        crossAxisAlignment:\r\n+                                            CrossAxisAlignment.start,\r\n+                                        mainAxisAlignment:\r\n+                                            MainAxisAlignment.start,\r\n+                                        children: [\r\n+                                          Text(\r\n+                                            entry.value.name!,\r\n+                                            style:\r\n+                                                const TextStyle(fontSize: 20),\r\n+                                          ),\r\n+                                          const SizedBox(\r\n+                                            height: 8,\r\n+                                          ),\r\n+                                          Row(\r\n+                                            children: [\r\n+                                              const Icon(\r\n+                                                Icons.phone,\r\n+                                                size: 20,\r\n+                                              ),\r\n+                                              const SizedBox(\r\n+                                                width: 10,\r\n+                                              ),\r\n+                                              Text(\r\n+                                                entry.value.mobile!,\r\n+                                                style: const TextStyle(\r\n+                                                    fontSize: 17),\r\n+                                              )\r\n+                                            ],\r\n+                                          )\r\n+                                        ],\r\n+                                      ),\r\n+                                    ],\r\n+                                  ),\r\n+                                ),\r\n+                              );\r\n+                            } else if (sender != null) {\r\n+                              return Slidable(\r\n+                                endActionPane: ActionPane(\r\n+                                    extentRatio: 0.43,\r\n+                                    motion: const ScrollMotion(),\r\n+                                    children: [\r\n+                                      CustomSlidableAction(\r\n+                                        backgroundColor: Theme.of(context)\r\n+                                            .scaffoldBackgroundColor,\r\n+                                        padding:\r\n+                                            const EdgeInsets.only(left: 30),\r\n+                                        onPressed: (context) {\r\n+                                          showDialog(\r\n+                                            barrierDismissible: false,\r\n+                                            context: context,\r\n+                                            builder: (BuildContext context) {\r\n+                                              return AlertDialog(\r\n+                                                backgroundColor: Colors.white,\r\n+                                                title: SizedBox(\r\n+                                                  width: 290,\r\n+                                                  child: Text(\r\n+                                                    'Do you want really to delete \"${sender.name}\" ?',\r\n+                                                    style: const TextStyle(\r\n+                                                      color: Colors.black,\r\n+                                                      fontWeight:\r\n+                                                          FontWeight.w600,\r\n+                                                      fontSize: 20,\r\n+                                                    ),\r\n+                                                  ),\r\n+                                                ),\r\n+                                                actions: [\r\n+                                                  TextButton(\r\n+                                                    onPressed: () {\r\n+                                                      Navigator.pop(context);\r\n+                                                    },\r\n+                                                    child: const Text(\r\n+                                                      'Cancel',\r\n+                                                      style: TextStyle(\r\n+                                                        color: Colors.black,\r\n+                                                        fontWeight:\r\n+                                                            FontWeight.w500,\r\n+                                                        fontSize: 17,\r\n+                                                      ),\r\n+                                                    ),\r\n+                                                  ),\r\n+                                                  TextButton(\r\n+                                                    onPressed: () async {\r\n+                                                      await deleteSender(\r\n+                                                              sender.id!)!\r\n+                                                          .then((statusCode) {\r\n+                                                        if (statusCode == 200) {\r\n+                                                          ScaffoldMessenger.of(\r\n+                                                                  context)\r\n+                                                              .showSnackBar(\r\n+                                                                  SnackBar(\r\n+                                                            content:\r\n+                                                                const Center(\r\n+                                                              child: Text(\r\n+                                                                'Deleted Successfully',\r\n+                                                                style: TextStyle(\r\n+                                                                    fontSize:\r\n+                                                                        15,\r\n+                                                                    fontWeight:\r\n+                                                                        FontWeight\r\n+                                                                            .w500),\r\n+                                                              ),\r\n+                                                            ),\r\n+                                                            backgroundColor:\r\n+                                                                primaryColor\r\n+                                                                    .withOpacity(\r\n+                                                                        0.7),\r\n+                                                            duration:\r\n+                                                                const Duration(\r\n+                                                                    seconds: 2),\r\n+                                                            width: 190,\r\n+                                                            elevation: 0,\r\n+                                                            behavior:\r\n+                                                                SnackBarBehavior\r\n+                                                                    .floating,\r\n+                                                          ));\r\n+                                                          setState(() {\r\n+                                                            senders =\r\n+                                                                getSenders();\r\n+                                                            initializeData();\r\n+                                                            Navigator.pop(\r\n+                                                                context);\r\n+                                                          });\r\n+                                                        } else {\r\n+                                                          ScaffoldMessenger.of(\r\n+                                                                  context)\r\n+                                                              .showSnackBar(\r\n+                                                                  const SnackBar(\r\n+                                                            content: Center(\r\n+                                                              child: Text(\r\n+                                                                'Something went wrong',\r\n+                                                                style: TextStyle(\r\n+                                                                    fontSize:\r\n+                                                                        15,\r\n+                                                                    fontWeight:\r\n+                                                                        FontWeight\r\n+                                                                            .w500),\r\n+                                                              ),\r\n+                                                            ),\r\n+                                                            backgroundColor:\r\n+                                                                Colors\r\n+                                                                    .redAccent,\r\n+                                                            duration: Duration(\r\n+                                                                seconds: 2),\r\n+                                                            width: 190,\r\n+                                                            elevation: 0,\r\n+                                                            behavior:\r\n+                                                                SnackBarBehavior\r\n+                                                                    .floating,\r\n+                                                          ));\r\n+                                                          Navigator.pop(\r\n+                                                              context);\r\n+                                                        }\r\n+                                                      });\r\n+                                                    },\r\n+                                                    child: const Text(\r\n+                                                      'OK',\r\n+                                                      style: TextStyle(\r\n+                                                        color: Colors.black,\r\n+                                                        fontWeight:\r\n+                                                            FontWeight.w500,\r\n+                                                        fontSize: 17,\r\n+                                                      ),\r\n+                                                    ),\r\n+                                                  ),\r\n+                                                ],\r\n+                                              );\r\n+                                            },\r\n+                                          );\r\n+                                        },\r\n+                                        child: Row(\r\n+                                          children: [\r\n+                                            Container(\r\n+                                              height: 50,\r\n+                                              width: 50,\r\n+                                              decoration: BoxDecoration(\r\n+                                                  color: Colors.red,\r\n+                                                  borderRadius:\r\n+                                                      BorderRadius.circular(\r\n+                                                          15)),\r\n+                                              child: const Center(\r\n+                                                child: Icon(\r\n+                                                  Icons.delete,\r\n+                                                  color: Colors.white,\r\n+                                                  size: 35,\r\n+                                                ),\r\n+                                              ),\r\n+                                            ),\r\n+                                          ],\r\n+                                        ),\r\n+                                      ),\r\n+                                      CustomSlidableAction(\r\n+                                        backgroundColor: Theme.of(context)\r\n+                                            .scaffoldBackgroundColor,\r\n+                                        padding: EdgeInsets.zero,\r\n+                                        onPressed: (context) {\r\n+                                          showDialog(\r\n+                                            barrierDismissible: false,\r\n+                                            context: context,\r\n+                                            builder: (BuildContext context) {\r\n+                                              return Padding(\r\n+                                                padding: EdgeInsets.only(\r\n+                                                    bottom:\r\n+                                                        MediaQuery.of(context)\r\n+                                                            .viewInsets\r\n+                                                            .bottom),\r\n+                                                child: AlertDialog(\r\n+                                                  shape: RoundedRectangleBorder(\r\n+                                                      borderRadius:\r\n+                                                          BorderRadius.circular(\r\n+                                                              15.0)),\r\n+                                                  titlePadding: EdgeInsets.zero,\r\n+                                                  backgroundColor: Colors.white,\r\n+                                                  title: EditSenderDialouge(\r\n+                                                    sender: sender,\r\n+                                                    dotThen: (value) {\r\n+                                                      setState(() {\r\n+                                                        senders = getSenders();\r\n+                                                        initializeData();\r\n+                                                        Navigator.pop(context);\r\n+                                                        showAlert(context,\r\n+                                                            message:\r\n+                                                                'Sender Updated',\r\n+                                                            color: primaryColor\r\n+                                                                .withOpacity(\r\n+                                                                    0.7),\r\n+                                                            width: 150);\r\n+                                                      });\r\n+                                                    },\r\n+                                                  ),\r\n+                                                ),\r\n+                                              );\r\n+                                            },\r\n+                                          );\r\n+                                        },\r\n+                                        child: Container(\r\n+                                          height: 50,\r\n+                                          width: 50,\r\n+                                          decoration: BoxDecoration(\r\n+                                              color: Colors.amber,\r\n+                                              borderRadius:\r\n+                                                  BorderRadius.circular(15)),\r\n+                                          child: const Center(\r\n+                                            child: Icon(\r\n+                                              Icons.edit,\r\n+                                              color: Colors.white,\r\n+                                              size: 35,\r\n+                                            ),\r\n+                                          ),\r\n+                                        ),\r\n+                                      ),\r\n+                                    ]),\r\n+                                child: ListTile(\r\n+                                  onTap: () {\r\n+                                    setState(() {\r\n+                                      Navigator.push(context, MaterialPageRoute(\r\n+                                        builder: (context) {\r\n+                                          return SenderMails(sender: sender);\r\n+                                        },\r\n+                                      ));\r\n+                                    });\r\n+                                  },\r\n+                                  title: Row(\r\n+                                    children: [\r\n+                                      const SizedBox(\r\n+                                        width: 30,\r\n+                                      ),\r\n+                                      const Icon(Icons.person_3_outlined),\r\n+                                      const SizedBox(\r\n+                                        width: 30,\r\n+                                      ),\r\n+                                      Column(\r\n+                                        crossAxisAlignment:\r\n+                                            CrossAxisAlignment.start,\r\n+                                        mainAxisAlignment:\r\n+                                            MainAxisAlignment.start,\r\n+                                        children: [\r\n+                                          Text(\r\n+                                            sender.name!,\r\n+                                            style:\r\n+                                                const TextStyle(fontSize: 20),\r\n+                                          ),\r\n+                                          const SizedBox(\r\n+                                            height: 8,\r\n+                                          ),\r\n+                                          Row(\r\n+                                            children: [\r\n+                                              const Icon(\r\n+                                                Icons.phone,\r\n+                                                size: 20,\r\n+                                              ),\r\n+                                              const SizedBox(\r\n+                                                width: 10,\r\n+                                              ),\r\n+                                              Text(\r\n+                                                sender.mobile!,\r\n+                                                style: const TextStyle(\r\n+                                                    fontSize: 17),\r\n+                                              )\r\n+                                            ],\r\n+                                          )\r\n+                                        ],\r\n+                                      ),\r\n+                                    ],\r\n+                                  ),\r\n+                                ),\r\n+                              );\r\n+                            }\r\n+                            return const SizedBox.shrink();\r\n+                          },\r\n+                        ),\r\n+                      ],\r\n+                    ),\r\n+                  );\r\n+                },\r\n+              );\r\n+            },\r\n+          ),\r\n+        )\r\n+      ],\r\n+    ));\r\n+  }\r\n+\r\n+  // searchSenders(Senders sendersData, String searchTerm) {\r\n+  //   result.clear();\r\n+  //   for (int i = 0; i < sendersData.data.length; i++) {\r\n+  //     final sender = sendersData.data[i];\r\n+  //     final senderName = sender.name;\r\n+  //     final senderMobile = sender.mobile;\r\n+\r\n+  //     if (senderMobile.contains(searchTerm) ||\r\n+  //         senderName.contains(searchTerm)) {\r\n+  //       result.addAll([senderName, senderMobile]);\r\n+  //     }\r\n+  //   }\r\n+  // }\r\n+}\r\n+\r\n+Map<String, List<SingleSender>> categorizeSenders(Senders sendersData) {\r\n+  final categorizedSenders = <String, List<SingleSender>>{};\r\n+\r\n+  for (final sender in sendersData.data!) {\r\n+    final category = sender.category!.name;\r\n+    if (!categorizedSenders.containsKey(category!)) {\r\n+      categorizedSenders[category] = <SingleSender>[];\r\n+    }\r\n+    categorizedSenders[category]!.add(sender);\r\n+  }\r\n+\r\n+  return categorizedSenders;\r\n+}\r\n"
                },
                {
                    "date": 1695334367856,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,8 @@\n import 'package:flutter/material.dart';\r\n import 'package:flutter_slidable/flutter_slidable.dart';\r\n import 'package:flutter_spinkit/flutter_spinkit.dart';\r\n \r\n-\r\n class SendersScreen extends StatefulWidget {\r\n   const SendersScreen({super.key});\r\n \r\n   @override\r\n@@ -145,944 +144,13 @@\n           child: FutureBuilder(\r\n             future: senders,\r\n             builder: (context, snapshot) {\r\n               if (snapshot.connectionState == ConnectionState.waiting) {\r\n-                return   Center(\r\n-                  child: SpinKitW(),\r\n-                );\r\n-              } else if (snapshot.hasError) {\r\n-                return Text(snapshot.error.toString());\r\n-              } else if (!snapshot.hasData) {\r\n-                return const Center(\r\n-                  child: Text('No data available.'),\r\n-                );\r\n-              }\r\n-\r\n-              sendersData = snapshot.data as Senders;\r\n-              final categorizedSenders = categorizeSenders(sendersData);\r\n-              if (matchingPairs.isEmpty && searchTextField.text.isNotEmpty) {\r\n                 return Center(\r\n-                  child: Column(\r\n-                    mainAxisAlignment: MainAxisAlignment.center,\r\n-                    crossAxisAlignment: CrossAxisAlignment.center,\r\n-                    children: [\r\n-                      Align(\r\n-                        alignment: Alignment.center,\r\n-                        child: Image.asset('images/result_not_found.png',\r\n-                            fit: BoxFit.cover, height: 250),\r\n-                      ),\r\n-                      const SizedBox(\r\n-                        height: 70,\r\n-                      )\r\n-                    ],\r\n+                  child: SpinKitWanderingCubes(\r\n+                    c\r\n                   ),\r\n                 );\r\n-              }\r\n-              return ListView.separated(\r\n-                padding: EdgeInsets.zero,\r\n-                separatorBuilder: (context, index) {\r\n-                  return const SizedBox(\r\n-                    height: 10,\r\n-                  );\r\n-                },\r\n-                physics: const BouncingScrollPhysics(),\r\n-                itemCount: categorizedSenders.length,\r\n-                itemBuilder: (context, sectionIndex) {\r\n-                  final category =\r\n-                      categorizedSenders.keys.elementAt(sectionIndex);\r\n-                  final categorySenders = categorizedSenders[category]!;\r\n-\r\n-                  // Filter the matchingPairs for the current category and search term\r\n-                  final filteredMatchingPairs = matchingPairs.where((entry) {\r\n-                    final sender = entry.value;\r\n-                    final senderCategory = sender.category!.name!.toLowerCase();\r\n-                    final senderName = sender.name!.toLowerCase();\r\n-                    final searchTerm = searchTextField.text.toLowerCase();\r\n-\r\n-                    return senderCategory == category.toLowerCase() &&\r\n-                        (senderName.contains(searchTerm) ||\r\n-                            sender.mobile!.contains(searchTerm));\r\n-                  }).toList();\r\n-\r\n-                  // Check if the section is empty, and skip it if so\r\n-                  if ((filteredMatchingPairs.isEmpty &&\r\n-                          categorySenders.isEmpty) ||\r\n-                      (filteredMatchingPairs.isEmpty &&\r\n-                          searchTextField.text.isNotEmpty)) {\r\n-                    return const SizedBox.shrink(); // Hide the empty section\r\n-                  }\r\n-\r\n-                  return Padding(\r\n-                    padding: const EdgeInsets.only(right: 12.0, left: 12),\r\n-                    child: Column(\r\n-                      children: [\r\n-                        Column(\r\n-                            crossAxisAlignment: CrossAxisAlignment.start,\r\n-                            mainAxisAlignment: MainAxisAlignment.start,\r\n-                            children: [\r\n-                              Column(\r\n-                                  crossAxisAlignment: CrossAxisAlignment.start,\r\n-                                  mainAxisAlignment: MainAxisAlignment.start,\r\n-                                  children: [\r\n-                                    Padding(\r\n-                                      padding: const EdgeInsetsDirectional.only(\r\n-                                        top: 20.0,\r\n-                                        start: 5,\r\n-                                      ),\r\n-                                      child: Text(\r\n-                                        category.tr(),\r\n-                                        style: const TextStyle(\r\n-                                          fontSize: 20,\r\n-                                          fontWeight: FontWeight.w600,\r\n-                                        ),\r\n-                                      ),\r\n-                                    ),\r\n-                                    Container(\r\n-                                      margin: const EdgeInsets.only(top: 10),\r\n-                                      width: MediaQuery.of(context).size.width,\r\n-                                      height: 1,\r\n-                                      color: Colors.grey.shade300,\r\n-                                    )\r\n-                                  ]),\r\n-                            ]),\r\n-                        ListView.builder(\r\n-                          padding: EdgeInsets.zero,\r\n-                          shrinkWrap: true,\r\n-                          physics: const NeverScrollableScrollPhysics(),\r\n-                          itemCount: searchTextField.text.isNotEmpty\r\n-                              ? filteredMatchingPairs.length\r\n-                              : categorySenders.length,\r\n-                          itemBuilder: (context, itemIndex) {\r\n-                            final entry = searchTextField.text.isNotEmpty &&\r\n-                                    itemIndex < filteredMatchingPairs.length\r\n-                                ? filteredMatchingPairs[itemIndex]\r\n-                                : null;\r\n-\r\n-                            final sender = searchTextField.text.isEmpty &&\r\n-                                    itemIndex < categorySenders.length\r\n-                                ? categorySenders[itemIndex]\r\n-                                : null;\r\n-\r\n-                            if (entry != null) {\r\n-                              return Slidable(\r\n-                                endActionPane: ActionPane(\r\n-                                    extentRatio: 0.44,\r\n-                                    motion: const ScrollMotion(),\r\n-                                    children: [\r\n-                                      CustomSlidableAction(\r\n-                                        backgroundColor: Theme.of(context)\r\n-                                            .scaffoldBackgroundColor,\r\n-                                        padding:\r\n-                                            const EdgeInsets.only(left: 30),\r\n-                                        onPressed: (context) {\r\n-                                          showDialog(\r\n-                                            barrierDismissible: false,\r\n-                                            context: context,\r\n-                                            builder: (BuildContext context) {\r\n-                                              return AlertDialog(\r\n-                                                backgroundColor: Colors.white,\r\n-                                                title: SizedBox(\r\n-                                                  width: 290,\r\n-                                                  child: Text(\r\n-                                                    'Do you want really to delete \"${entry.value.name}\" ?',\r\n-                                                    style: const TextStyle(\r\n-                                                      color: Colors.black,\r\n-                                                      fontWeight:\r\n-                                                          FontWeight.w600,\r\n-                                                      fontSize: 20,\r\n-                                                    ),\r\n-                                                  ),\r\n-                                                ),\r\n-                                                actions: [\r\n-                                                  TextButton(\r\n-                                                    onPressed: () {\r\n-                                                      Navigator.pop(context);\r\n-                                                    },\r\n-                                                    child: const Text(\r\n-                                                      'Cancel',\r\n-                                                      style: TextStyle(\r\n-                                                        color: Colors.black,\r\n-                                                        fontWeight:\r\n-                                                            FontWeight.w500,\r\n-                                                        fontSize: 17,\r\n-                                                      ),\r\n-                                                    ),\r\n-                                                  ),\r\n-                                                  TextButton(\r\n-                                                    onPressed: () async {\r\n-                                                      await deleteSender(\r\n-                                                              entry.value.id!)!\r\n-                                                          .then((statusCode) {\r\n-                                                        if (statusCode == 200) {\r\n-                                                          ScaffoldMessenger.of(\r\n-                                                                  context)\r\n-                                                              .showSnackBar(\r\n-                                                                  SnackBar(\r\n-                                                            content:\r\n-                                                                const Center(\r\n-                                                              child: Text(\r\n-                                                                'Deleted Successfully',\r\n-                                                                style: TextStyle(\r\n-                                                                    fontSize:\r\n-                                                                        15,\r\n-                                                                    fontWeight:\r\n-                                                                        FontWeight\r\n-                                                                            .w500),\r\n-                                                              ),\r\n-                                                            ),\r\n-                                                            backgroundColor:\r\n-                                                                primaryColor\r\n-                                                                    .withOpacity(\r\n-                                                                        0.7),\r\n-                                                            duration:\r\n-                                                                const Duration(\r\n-                                                                    seconds: 2),\r\n-                                                            width: 190,\r\n-                                                            elevation: 0,\r\n-                                                            behavior:\r\n-                                                                SnackBarBehavior\r\n-                                                                    .floating,\r\n-                                                          ));\r\n-                                                          setState(() {\r\n-                                                            senders =\r\n-                                                                getSenders();\r\n-                                                            initializeData();\r\n-                                                            Navigator.pop(\r\n-                                                                context);\r\n-                                                          });\r\n-                                                        } else {\r\n-                                                          ScaffoldMessenger.of(\r\n-                                                                  context)\r\n-                                                              .showSnackBar(\r\n-                                                                  const SnackBar(\r\n-                                                            content: Center(\r\n-                                                              child: Text(\r\n-                                                                'Something went wrong',\r\n-                                                                style: TextStyle(\r\n-                                                                    fontSize:\r\n-                                                                        15,\r\n-                                                                    fontWeight:\r\n-                                                                        FontWeight\r\n-                                                                            .w500),\r\n-                                                              ),\r\n-                                                            ),\r\n-                                                            backgroundColor:\r\n-                                                                Colors\r\n-                                                                    .redAccent,\r\n-                                                            duration: Duration(\r\n-                                                                seconds: 2),\r\n-                                                            width: 190,\r\n-                                                            elevation: 0,\r\n-                                                            behavior:\r\n-                                                                SnackBarBehavior\r\n-                                                                    .floating,\r\n-                                                          ));\r\n-                                                          Navigator.pop(\r\n-                                                              context);\r\n-                                                        }\r\n-                                                      });\r\n-                                                    },\r\n-                                                    child: const Text(\r\n-                                                      'OK',\r\n-                                                      style: TextStyle(\r\n-                                                        color: Colors.black,\r\n-                                                        fontWeight:\r\n-                                                            FontWeight.w500,\r\n-                                                        fontSize: 17,\r\n-                                                      ),\r\n-                                                    ),\r\n-                                                  ),\r\n-                                                ],\r\n-                                              );\r\n-                                            },\r\n-                                          );\r\n-                                        },\r\n-                                        child: Row(\r\n-                                          children: [\r\n-                                            Container(\r\n-                                              height: 50,\r\n-                                              width: 50,\r\n-                                              decoration: BoxDecoration(\r\n-                                                  color: Colors.red,\r\n-                                                  borderRadius:\r\n-                                                      BorderRadius.circular(\r\n-                                                          15)),\r\n-                                              child: const Center(\r\n-                                                child: Icon(\r\n-                                                  Icons.delete,\r\n-                                                  color: Colors.white,\r\n-                                                  size: 35,\r\n-                                                ),\r\n-                                              ),\r\n-                                            ),\r\n-                                          ],\r\n-                                        ),\r\n-                                      ),\r\n-                                      CustomSlidableAction(\r\n-                                        backgroundColor: Theme.of(context)\r\n-                                            .scaffoldBackgroundColor,\r\n-                                        padding: EdgeInsets.zero,\r\n-                                        onPressed: (context) {\r\n-                                          showDialog(\r\n-                                            barrierDismissible: false,\r\n-                                            context: context,\r\n-                                            builder: (BuildContext context) {\r\n-                                              return AlertDialog(\r\n-                                                backgroundColor: Colors.white,\r\n-                                                title: SizedBox(\r\n-                                                  width: 290,\r\n-                                                  child: Text(\r\n-                                                    'Do you want really to delete \"${entry.value.name}\" ?',\r\n-                                                    style: const TextStyle(\r\n-                                                      color: Colors.black,\r\n-                                                      fontWeight:\r\n-                                                          FontWeight.w600,\r\n-                                                      fontSize: 20,\r\n-                                                    ),\r\n-                                                  ),\r\n-                                                ),\r\n-                                                actions: [\r\n-                                                  TextButton(\r\n-                                                    onPressed: () {\r\n-                                                      Navigator.pop(context);\r\n-                                                    },\r\n-                                                    child: const Text(\r\n-                                                      'Cancel',\r\n-                                                      style: TextStyle(\r\n-                                                        color: Colors.black,\r\n-                                                        fontWeight:\r\n-                                                            FontWeight.w500,\r\n-                                                        fontSize: 17,\r\n-                                                      ),\r\n-                                                    ),\r\n-                                                  ),\r\n-                                                  TextButton(\r\n-                                                    onPressed: () async {\r\n-                                                      await deleteSender(\r\n-                                                              entry.value.id!)!\r\n-                                                          .then((statusCode) {\r\n-                                                        if (statusCode == 200) {\r\n-                                                          ScaffoldMessenger.of(\r\n-                                                                  context)\r\n-                                                              .showSnackBar(\r\n-                                                                  SnackBar(\r\n-                                                            content:\r\n-                                                                const Center(\r\n-                                                              child: Text(\r\n-                                                                'Deleted Successfully',\r\n-                                                                style: TextStyle(\r\n-                                                                    fontSize:\r\n-                                                                        15,\r\n-                                                                    fontWeight:\r\n-                                                                        FontWeight\r\n-                                                                            .w500),\r\n-                                                              ),\r\n-                                                            ),\r\n-                                                            backgroundColor:\r\n-                                                                primaryColor\r\n-                                                                    .withOpacity(\r\n-                                                                        0.7),\r\n-                                                            duration:\r\n-                                                                const Duration(\r\n-                                                                    seconds: 2),\r\n-                                                            width: 190,\r\n-                                                            elevation: 0,\r\n-                                                            behavior:\r\n-                                                                SnackBarBehavior\r\n-                                                                    .floating,\r\n-                                                          ));\r\n-                                                          setState(() {\r\n-                                                            senders =\r\n-                                                                getSenders();\r\n-                                                            initializeData();\r\n-                                                            Navigator.pop(\r\n-                                                                context);\r\n-                                                          });\r\n-                                                        } else {\r\n-                                                          ScaffoldMessenger.of(\r\n-                                                                  context)\r\n-                                                              .showSnackBar(\r\n-                                                                  const SnackBar(\r\n-                                                            content: Center(\r\n-                                                              child: Text(\r\n-                                                                'Something went wrong',\r\n-                                                                style: TextStyle(\r\n-                                                                    fontSize:\r\n-                                                                        15,\r\n-                                                                    fontWeight:\r\n-                                                                        FontWeight\r\n-                                                                            .w500),\r\n-                                                              ),\r\n-                                                            ),\r\n-                                                            backgroundColor:\r\n-                                                                Colors\r\n-                                                                    .redAccent,\r\n-                                                            duration: Duration(\r\n-                                                                seconds: 2),\r\n-                                                            width: 190,\r\n-                                                            elevation: 0,\r\n-                                                            behavior:\r\n-                                                                SnackBarBehavior\r\n-                                                                    .floating,\r\n-                                                          ));\r\n-                                                          Navigator.pop(\r\n-                                                              context);\r\n-                                                        }\r\n-                                                      });\r\n-                                                    },\r\n-                                                    child: const Text(\r\n-                                                      'OK',\r\n-                                                      style: TextStyle(\r\n-                                                        color: Colors.black,\r\n-                                                        fontWeight:\r\n-                                                            FontWeight.w500,\r\n-                                                        fontSize: 17,\r\n-                                                      ),\r\n-                                                    ),\r\n-                                                  ),\r\n-                                                ],\r\n-                                              );\r\n-                                            },\r\n-                                          );\r\n-                                        },\r\n-                                        child: Container(\r\n-                                          height: 50,\r\n-                                          width: 50,\r\n-                                          decoration: BoxDecoration(\r\n-                                              color: Colors.amber,\r\n-                                              borderRadius:\r\n-                                                  BorderRadius.circular(15)),\r\n-                                          child: const Center(\r\n-                                            child: Icon(\r\n-                                              Icons.edit,\r\n-                                              color: Colors.white,\r\n-                                              size: 35,\r\n-                                            ),\r\n-                                          ),\r\n-                                        ),\r\n-                                      ),\r\n-                                    ]),\r\n-                                child: ListTile(\r\n-                                  onTap: () {\r\n-                                    setState(() {\r\n-                                      Navigator.push(context, MaterialPageRoute(\r\n-                                        builder: (context) {\r\n-                                          return SenderMails(sender: sender);\r\n-                                        },\r\n-                                      ));\r\n-                                    });\r\n-                                  },\r\n-                                  title: Row(\r\n-                                    children: [\r\n-                                      const SizedBox(\r\n-                                        width: 30,\r\n-                                      ),\r\n-                                      const Icon(Icons.person_3_outlined),\r\n-                                      const SizedBox(\r\n-                                        width: 30,\r\n-                                      ),\r\n-                                      Column(\r\n-                                        crossAxisAlignment:\r\n-                                            CrossAxisAlignment.start,\r\n-                                        mainAxisAlignment:\r\n-                                            MainAxisAlignment.start,\r\n-                                        children: [\r\n-                                          Text(\r\n-                                            entry.value.name!,\r\n-                                            style:\r\n-                                                const TextStyle(fontSize: 20),\r\n-                                          ),\r\n-                                          const SizedBox(\r\n-                                            height: 8,\r\n-                                          ),\r\n-                                          Row(\r\n-                                            children: [\r\n-                                              const Icon(\r\n-                                                Icons.phone,\r\n-                                                size: 20,\r\n-                                              ),\r\n-                                              const SizedBox(\r\n-                                                width: 10,\r\n-                                              ),\r\n-                                              Text(\r\n-                                                entry.value.mobile!,\r\n-                                                style: const TextStyle(\r\n-                                                    fontSize: 17),\r\n-                                              )\r\n-                                            ],\r\n-                                          )\r\n-                                        ],\r\n-                                      ),\r\n-                                    ],\r\n-                                  ),\r\n-                                ),\r\n-                              );\r\n-                            } else if (sender != null) {\r\n-                              return Slidable(\r\n-                                endActionPane: ActionPane(\r\n-                                    extentRatio: 0.43,\r\n-                                    motion: const ScrollMotion(),\r\n-                                    children: [\r\n-                                      CustomSlidableAction(\r\n-                                        backgroundColor: Theme.of(context)\r\n-                                            .scaffoldBackgroundColor,\r\n-                                        padding:\r\n-                                            const EdgeInsets.only(left: 30),\r\n-                                        onPressed: (context) {\r\n-                                          showDialog(\r\n-                                            barrierDismissible: false,\r\n-                                            context: context,\r\n-                                            builder: (BuildContext context) {\r\n-                                              return AlertDialog(\r\n-                                                backgroundColor: Colors.white,\r\n-                                                title: SizedBox(\r\n-                                                  width: 290,\r\n-                                                  child: Text(\r\n-                                                    'Do you want really to delete \"${sender.name}\" ?',\r\n-                                                    style: const TextStyle(\r\n-                                                      color: Colors.black,\r\n-                                                      fontWeight:\r\n-                                                          FontWeight.w600,\r\n-                                                      fontSize: 20,\r\n-                                                    ),\r\n-                                                  ),\r\n-                                                ),\r\n-                                                actions: [\r\n-                                                  TextButton(\r\n-                                                    onPressed: () {\r\n-                                                      Navigator.pop(context);\r\n-                                                    },\r\n-                                                    child: const Text(\r\n-                                                      'Cancel',\r\n-                                                      style: TextStyle(\r\n-                                                        color: Colors.black,\r\n-                                                        fontWeight:\r\n-                                                            FontWeight.w500,\r\n-                                                        fontSize: 17,\r\n-                                                      ),\r\n-                                                    ),\r\n-                                                  ),\r\n-                                                  TextButton(\r\n-                                                    onPressed: () async {\r\n-                                                      await deleteSender(\r\n-                                                              sender.id!)!\r\n-                                                          .then((statusCode) {\r\n-                                                        if (statusCode == 200) {\r\n-                                                          ScaffoldMessenger.of(\r\n-                                                                  context)\r\n-                                                              .showSnackBar(\r\n-                                                                  SnackBar(\r\n-                                                            content:\r\n-                                                                const Center(\r\n-                                                              child: Text(\r\n-                                                                'Deleted Successfully',\r\n-                                                                style: TextStyle(\r\n-                                                                    fontSize:\r\n-                                                                        15,\r\n-                                                                    fontWeight:\r\n-                                                                        FontWeight\r\n-                                                                            .w500),\r\n-                                                              ),\r\n-                                                            ),\r\n-                                                            backgroundColor:\r\n-                                                                primaryColor\r\n-                                                                    .withOpacity(\r\n-                                                                        0.7),\r\n-                                                            duration:\r\n-                                                                const Duration(\r\n-                                                                    seconds: 2),\r\n-                                                            width: 190,\r\n-                                                            elevation: 0,\r\n-                                                            behavior:\r\n-                                                                SnackBarBehavior\r\n-                                                                    .floating,\r\n-                                                          ));\r\n-                                                          setState(() {\r\n-                                                            senders =\r\n-                                                                getSenders();\r\n-                                                            initializeData();\r\n-                                                            Navigator.pop(\r\n-                                                                context);\r\n-                                                          });\r\n-                                                        } else {\r\n-                                                          ScaffoldMessenger.of(\r\n-                                                                  context)\r\n-                                                              .showSnackBar(\r\n-                                                                  const SnackBar(\r\n-                                                            content: Center(\r\n-                                                              child: Text(\r\n-                                                                'Something went wrong',\r\n-                                                                style: TextStyle(\r\n-                                                                    fontSize:\r\n-                                                                        15,\r\n-                                                                    fontWeight:\r\n-                                                                        FontWeight\r\n-                                                                            .w500),\r\n-                                                              ),\r\n-                                                            ),\r\n-                                                            backgroundColor:\r\n-                                                                Colors\r\n-                                                                    .redAccent,\r\n-                                                            duration: Duration(\r\n-                                                                seconds: 2),\r\n-                                                            width: 190,\r\n-                                                            elevation: 0,\r\n-                                                            behavior:\r\n-                                                                SnackBarBehavior\r\n-                                                                    .floating,\r\n-                                                          ));\r\n-                                                          Navigator.pop(\r\n-                                                              context);\r\n-                                                        }\r\n-                                                      });\r\n-                                                    },\r\n-                                                    child: const Text(\r\n-                                                      'OK',\r\n-                                                      style: TextStyle(\r\n-                                                        color: Colors.black,\r\n-                                                        fontWeight:\r\n-                                                            FontWeight.w500,\r\n-                                                        fontSize: 17,\r\n-                                                      ),\r\n-                                                    ),\r\n-                                                  ),\r\n-                                                ],\r\n-                                              );\r\n-                                            },\r\n-                                          );\r\n-                                        },\r\n-                                        child: Row(\r\n-                                          children: [\r\n-                                            Container(\r\n-                                              height: 50,\r\n-                                              width: 50,\r\n-                                              decoration: BoxDecoration(\r\n-                                                  color: Colors.red,\r\n-                                                  borderRadius:\r\n-                                                      BorderRadius.circular(\r\n-                                                          15)),\r\n-                                              child: const Center(\r\n-                                                child: Icon(\r\n-                                                  Icons.delete,\r\n-                                                  color: Colors.white,\r\n-                                                  size: 35,\r\n-                                                ),\r\n-                                              ),\r\n-                                            ),\r\n-                                          ],\r\n-                                        ),\r\n-                                      ),\r\n-                                      CustomSlidableAction(\r\n-                                        backgroundColor: Theme.of(context)\r\n-                                            .scaffoldBackgroundColor,\r\n-                                        padding: EdgeInsets.zero,\r\n-                                        onPressed: (context) {\r\n-                                          showDialog(\r\n-                                            barrierDismissible: false,\r\n-                                            context: context,\r\n-                                            builder: (BuildContext context) {\r\n-                                              return Padding(\r\n-                                                padding: EdgeInsets.only(\r\n-                                                    bottom:\r\n-                                                        MediaQuery.of(context)\r\n-                                                            .viewInsets\r\n-                                                            .bottom),\r\n-                                                child: AlertDialog(\r\n-                                                  shape: RoundedRectangleBorder(\r\n-                                                      borderRadius:\r\n-                                                          BorderRadius.circular(\r\n-                                                              15.0)),\r\n-                                                  titlePadding: EdgeInsets.zero,\r\n-                                                  backgroundColor: Colors.white,\r\n-                                                  title: EditSenderDialouge(\r\n-                                                    sender: sender,\r\n-                                                    dotThen: (value) {\r\n-                                                      setState(() {\r\n-                                                        senders = getSenders();\r\n-                                                        initializeData();\r\n-                                                        Navigator.pop(context);\r\n-                                                        showAlert(context,\r\n-                                                            message:\r\n-                                                                'Sender Updated',\r\n-                                                            color: primaryColor\r\n-                                                                .withOpacity(\r\n-                                                                    0.7),\r\n-                                                            width: 150);\r\n-                                                      });\r\n-                                                    },\r\n-                                                  ),\r\n-                                                ),\r\n-                                              );\r\n-                                            },\r\n-                                          );\r\n-                                        },\r\n-                                        child: Container(\r\n-                                          height: 50,\r\n-                                          width: 50,\r\n-                                          decoration: BoxDecoration(\r\n-                                              color: Colors.amber,\r\n-                                              borderRadius:\r\n-                                                  BorderRadius.circular(15)),\r\n-                                          child: const Center(\r\n-                                            child: Icon(\r\n-                                              Icons.edit,\r\n-                                              color: Colors.white,\r\n-                                              size: 35,\r\n-                                            ),\r\n-                                          ),\r\n-                                        ),\r\n-                                      ),\r\n-                                    ]),\r\n-                                child: ListTile(\r\n-                                  onTap: () {\r\n-                                    setState(() {\r\n-                                      Navigator.push(context, MaterialPageRoute(\r\n-                                        builder: (context) {\r\n-                                          return SenderMails(sender: sender);\r\n-                                        },\r\n-                                      ));\r\n-                                    });\r\n-                                  },\r\n-                                  title: Row(\r\n-                                    children: [\r\n-                                      const SizedBox(\r\n-                                        width: 30,\r\n-                                      ),\r\n-                                      const Icon(Icons.person_3_outlined),\r\n-                                      const SizedBox(\r\n-                                        width: 30,\r\n-                                      ),\r\n-                                      Column(\r\n-                                        crossAxisAlignment:\r\n-                                            CrossAxisAlignment.start,\r\n-                                        mainAxisAlignment:\r\n-                                            MainAxisAlignment.start,\r\n-                                        children: [\r\n-                                          Text(\r\n-                                            sender.name!,\r\n-                                            style:\r\n-                                                const TextStyle(fontSize: 20),\r\n-                                          ),\r\n-                                          const SizedBox(\r\n-                                            height: 8,\r\n-                                          ),\r\n-                                          Row(\r\n-                                            children: [\r\n-                                              const Icon(\r\n-                                                Icons.phone,\r\n-                                                size: 20,\r\n-                                              ),\r\n-                                              const SizedBox(\r\n-                                                width: 10,\r\n-                                              ),\r\n-                                              Text(\r\n-                                                sender.mobile!,\r\n-                                                style: const TextStyle(\r\n-                                                    fontSize: 17),\r\n-                                              )\r\n-                                            ],\r\n-                                          )\r\n-                                        ],\r\n-                                      ),\r\n-                                    ],\r\n-                                  ),\r\n-                                ),\r\n-                              );\r\n-                            }\r\n-                            return const SizedBox.shrink();\r\n-                          },\r\n-                        ),\r\n-                      ],\r\n-                    ),\r\n-                  );\r\n-                },\r\n-              );\r\n-            },\r\n-          ),\r\n-        )\r\n-      ],\r\n-    ));\r\n-  }\r\n-\r\n-  // searchSenders(Senders sendersData, String searchTerm) {\r\n-  //   result.clear();\r\n-  //   for (int i = 0; i < sendersData.data.length; i++) {\r\n-  //     final sender = sendersData.data[i];\r\n-  //     final senderName = sender.name;\r\n-  //     final senderMobile = sender.mobile;\r\n-\r\n-  //     if (senderMobile.contains(searchTerm) ||\r\n-  //         senderName.contains(searchTerm)) {\r\n-  //       result.addAll([senderName, senderMobile]);\r\n-  //     }\r\n-  //   }\r\n-  // }\r\n-}\r\n-\r\n-Map<String, List<SingleSender>> categorizeSenders(Senders sendersData) {\r\n-  final categorizedSenders = <String, List<SingleSender>>{};\r\n-\r\n-  for (final sender in sendersData.data!) {\r\n-    final category = sender.category!.name;\r\n-    if (!categorizedSenders.containsKey(category!)) {\r\n-      categorizedSenders[category] = <SingleSender>[];\r\n-    }\r\n-    categorizedSenders[category]!.add(sender);\r\n-  }\r\n-\r\n-  return categorizedSenders;\r\n-}\r\n-import 'package:easy_localization/easy_localization.dart';\r\n-import 'package:final_projectt/Screens/sender_mails.dart';\r\n-import 'package:final_projectt/core/services/all_user_controller.dart';\r\n-import 'package:final_projectt/core/services/new_inbox_controller.dart';\r\n-import 'package:final_projectt/core/util/constants/colors.dart';\r\n-import 'package:final_projectt/core/widgets/edit_sender_dialouge.dart';\r\n-import 'package:final_projectt/core/widgets/show_alert.dart';\r\n-import 'package:final_projectt/models/sender_model.dart';\r\n-import 'package:flutter/material.dart';\r\n-import 'package:flutter_slidable/flutter_slidable.dart';\r\n-import 'package:flutter_spinkit/flutter_spinkit.dart';\r\n-\r\n-\r\n-class SendersScreen extends StatefulWidget {\r\n-  const SendersScreen({super.key});\r\n-\r\n-  @override\r\n-  State<SendersScreen> createState() => _SendersScreenState();\r\n-}\r\n-\r\n-class _SendersScreenState extends State<SendersScreen> {\r\n-  TextEditingController searchTextField = TextEditingController();\r\n-  late Future<Senders> senders;\r\n-  late Map<String, SingleSender> searchMap = {};\r\n-  List<MapEntry<String, SingleSender>> matchingPairs = [];\r\n-\r\n-  dynamic sendersData;\r\n-\r\n-  @override\r\n-  void initState() {\r\n-    senders = getSenders();\r\n-    initializeData();\r\n-    super.initState();\r\n-  }\r\n-\r\n-  Future<Map<String, SingleSender>> initializeData() async {\r\n-    final sendersData = (await getSenders()).data;\r\n-\r\n-    for (SingleSender sender in sendersData!) {\r\n-      searchMap[sender.name!] = sender;\r\n-    }\r\n-    return searchMap;\r\n-  }\r\n-\r\n-  void searchSenders(String target) {\r\n-    String substring = target.toLowerCase();\r\n-    matchingPairs.clear(); // Clear the previous results\r\n-\r\n-    searchMap.forEach((key, singleSender) {\r\n-      String nameLower = singleSender.name!.toLowerCase();\r\n-\r\n-      if (nameLower.contains(substring)) {\r\n-        matchingPairs.add(MapEntry(key, singleSender));\r\n-      }\r\n-    });\r\n-\r\n-    setState(() {});\r\n-  }\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    return Scaffold(\r\n-        body: Column(\r\n-      children: [\r\n-        Padding(\r\n-          padding:\r\n-              const EdgeInsetsDirectional.only(top: 40, start: 15, end: 15),\r\n-          child: Column(\r\n-            children: [\r\n-              Row(\r\n-                mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n-                children: [\r\n-                  IconButton(\r\n-                    onPressed: () {\r\n-                      Navigator.pop(context);\r\n-                    },\r\n-                    icon: Icon(\r\n-                      Icons.arrow_back_ios_new_rounded,\r\n-                      color: primaryColor,\r\n-                    ),\r\n-                  ),\r\n-                  Text(\r\n-                    \"Senders\".tr(),\r\n-                    style: const TextStyle(\r\n-                      color: Colors.black,\r\n-                      fontSize: 20,\r\n-                    ),\r\n-                  ),\r\n-                  IconButton(\r\n-                    onPressed: () {},\r\n-                    icon: const Icon(\r\n-                      Icons.arrow_back_ios_new_rounded,\r\n-                      color: Colors.transparent,\r\n-                    ),\r\n-                  ),\r\n-                ],\r\n-              ),\r\n-              Padding(\r\n-                padding: const EdgeInsetsDirectional.only(start: 10, end: 10),\r\n-                child: Column(\r\n-                  crossAxisAlignment: CrossAxisAlignment.start,\r\n-                  mainAxisAlignment: MainAxisAlignment.start,\r\n-                  children: [\r\n-                    Padding(\r\n-                      padding: const EdgeInsetsDirectional.only(top: 5),\r\n-                      child: TextField(\r\n-                        controller: searchTextField,\r\n-                        onChanged: (value) {\r\n-                          searchSenders(value);\r\n-                        },\r\n-                        decoration: InputDecoration(\r\n-                          prefixIcon: const Icon(Icons.search_rounded),\r\n-                          suffixIcon: IconButton(\r\n-                            onPressed: () {\r\n-                              setState(() {\r\n-                                searchTextField.clear();\r\n-                              });\r\n-                            },\r\n-                            icon: const Icon(Icons.cancel),\r\n-                          ),\r\n-                          filled: true,\r\n-                          fillColor: Colors.black.withOpacity(0.05),\r\n-                          contentPadding: const EdgeInsets.all(15),\r\n-                          hintText: \"Search ...\".tr(),\r\n-                          hintStyle:\r\n-                              const TextStyle(color: Colors.grey, fontSize: 19),\r\n-                          enabledBorder: UnderlineInputBorder(\r\n-                            borderSide: BorderSide(color: backGroundColor),\r\n-                            borderRadius: BorderRadius.circular(30),\r\n-                          ),\r\n-                          focusedBorder: UnderlineInputBorder(\r\n-                            borderRadius: BorderRadius.circular(30),\r\n-                            borderSide: BorderSide(color: backGroundColor),\r\n-                          ),\r\n-                        ),\r\n-                      ),\r\n-                    ),\r\n-                  ],\r\n-                ),\r\n-              ),\r\n-            ],\r\n-          ),\r\n-        ),\r\n-        Expanded(\r\n-          child: FutureBuilder(\r\n-            future: senders,\r\n-            builder: (context, snapshot) {\r\n-              if (snapshot.connectionState == ConnectionState.waiting) {\r\n-                return const Center(\r\n-                  child: SpinKitFadingCube(),\r\n-                );\r\n               } else if (snapshot.hasError) {\r\n                 return Text(snapshot.error.toString());\r\n               } else if (!snapshot.hasData) {\r\n                 return const Center(\r\n"
                },
                {
                    "date": 1695334374439,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -146,9 +146,9 @@\n             builder: (context, snapshot) {\r\n               if (snapshot.connectionState == ConnectionState.waiting) {\r\n                 return Center(\r\n                   child: SpinKitWanderingCubes(\r\n-                    c\r\n+                    color: prima,\r\n                   ),\r\n                 );\r\n               } else if (snapshot.hasError) {\r\n                 return Text(snapshot.error.toString());\r\n"
                },
                {
                    "date": 1695334446442,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -146,9 +146,10 @@\n             builder: (context, snapshot) {\r\n               if (snapshot.connectionState == ConnectionState.waiting) {\r\n                 return Center(\r\n                   child: SpinKitWanderingCubes(\r\n-                    color: prima,\r\n+                    color: primaryColor,\r\n+                    s\r\n                   ),\r\n                 );\r\n               } else if (snapshot.hasError) {\r\n                 return Text(snapshot.error.toString());\r\n"
                },
                {
                    "date": 1695334452695,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -147,9 +147,9 @@\n               if (snapshot.connectionState == ConnectionState.waiting) {\r\n                 return Center(\r\n                   child: SpinKitWanderingCubes(\r\n                     color: primaryColor,\r\n-                    s\r\n+                    size: 50,\r\n                   ),\r\n                 );\r\n               } else if (snapshot.hasError) {\r\n                 return Text(snapshot.error.toString());\r\n"
                },
                {
                    "date": 1695334462585,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -147,9 +147,9 @@\n               if (snapshot.connectionState == ConnectionState.waiting) {\r\n                 return Center(\r\n                   child: SpinKitWanderingCubes(\r\n                     color: primaryColor,\r\n-                    size: 50,\r\n+                    size: 30,\r\n                   ),\r\n                 );\r\n               } else if (snapshot.hasError) {\r\n                 return Text(snapshot.error.toString());\r\n"
                },
                {
                    "date": 1695334483982,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -145,9 +145,9 @@\n             future: senders,\r\n             builder: (context, snapshot) {\r\n               if (snapshot.connectionState == ConnectionState.waiting) {\r\n                 return Center(\r\n-                  child: SpinKitWanderingCubes(\r\n+                  child: SpinKitRota(\r\n                     color: primaryColor,\r\n                     size: 30,\r\n                   ),\r\n                 );\r\n"
                },
                {
                    "date": 1695334495859,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -145,10 +145,10 @@\n             future: senders,\r\n             builder: (context, snapshot) {\r\n               if (snapshot.connectionState == ConnectionState.waiting) {\r\n                 return Center(\r\n-                  child: SpinKitRota(\r\n-                    color: primaryColor,\r\n+                  child: SpinKitRotatingCircle(\r\n+                    color: Colors,\r\n                     size: 30,\r\n                   ),\r\n                 );\r\n               } else if (snapshot.hasError) {\r\n"
                },
                {
                    "date": 1695334501338,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -146,9 +146,9 @@\n             builder: (context, snapshot) {\r\n               if (snapshot.connectionState == ConnectionState.waiting) {\r\n                 return Center(\r\n                   child: SpinKitRotatingCircle(\r\n-                    color: Colors,\r\n+                    color: Colors.grey,\r\n                     size: 30,\r\n                   ),\r\n                 );\r\n               } else if (snapshot.hasError) {\r\n"
                },
                {
                    "date": 1695334572303,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -145,9 +145,9 @@\n             future: senders,\r\n             builder: (context, snapshot) {\r\n               if (snapshot.connectionState == ConnectionState.waiting) {\r\n                 return const Center(\r\n-                  child: SpinKitRotatingCircle(\r\n+                  child: SpinKitSquareCircle(\r\n                     color: Colors.grey,\r\n                     size: 30,\r\n                   ),\r\n                 );\r\n"
                },
                {
                    "date": 1695334607553,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -145,9 +145,9 @@\n             future: senders,\r\n             builder: (context, snapshot) {\r\n               if (snapshot.connectionState == ConnectionState.waiting) {\r\n                 return const Center(\r\n-                  child: SpinKitSquareCircle(\r\n+                  child: SpinKitRotatingCircle(\r\n                     color: Colors.grey,\r\n                     size: 30,\r\n                   ),\r\n                 );\r\n"
                }
            ],
            "date": 1695334278579,
            "name": "Commit-0",
            "content": "import 'package:easy_localization/easy_localization.dart';\r\nimport 'package:final_projectt/Screens/sender_mails.dart';\r\nimport 'package:final_projectt/core/services/all_user_controller.dart';\r\nimport 'package:final_projectt/core/services/new_inbox_controller.dart';\r\nimport 'package:final_projectt/core/util/constants/colors.dart';\r\nimport 'package:final_projectt/core/widgets/edit_sender_dialouge.dart';\r\nimport 'package:final_projectt/core/widgets/show_alert.dart';\r\nimport 'package:final_projectt/models/sender_model.dart';\r\nimport 'package:flutter/material.dart';\r\nimport 'package:flutter_slidable/flutter_slidable.dart';\r\n\r\n\r\nclass SendersScreen extends StatefulWidget {\r\n  const SendersScreen({super.key});\r\n\r\n  @override\r\n  State<SendersScreen> createState() => _SendersScreenState();\r\n}\r\n\r\nclass _SendersScreenState extends State<SendersScreen> {\r\n  TextEditingController searchTextField = TextEditingController();\r\n  late Future<Senders> senders;\r\n  late Map<String, SingleSender> searchMap = {};\r\n  List<MapEntry<String, SingleSender>> matchingPairs = [];\r\n\r\n  dynamic sendersData;\r\n\r\n  @override\r\n  void initState() {\r\n    senders = getSenders();\r\n    initializeData();\r\n    super.initState();\r\n  }\r\n\r\n  Future<Map<String, SingleSender>> initializeData() async {\r\n    final sendersData = (await getSenders()).data;\r\n\r\n    for (SingleSender sender in sendersData!) {\r\n      searchMap[sender.name!] = sender;\r\n    }\r\n    return searchMap;\r\n  }\r\n\r\n  void searchSenders(String target) {\r\n    String substring = target.toLowerCase();\r\n    matchingPairs.clear(); // Clear the previous results\r\n\r\n    searchMap.forEach((key, singleSender) {\r\n      String nameLower = singleSender.name!.toLowerCase();\r\n\r\n      if (nameLower.contains(substring)) {\r\n        matchingPairs.add(MapEntry(key, singleSender));\r\n      }\r\n    });\r\n\r\n    setState(() {});\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n        body: Column(\r\n      children: [\r\n        Padding(\r\n          padding:\r\n              const EdgeInsetsDirectional.only(top: 40, start: 15, end: 15),\r\n          child: Column(\r\n            children: [\r\n              Row(\r\n                mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n                children: [\r\n                  IconButton(\r\n                    onPressed: () {\r\n                      Navigator.pop(context);\r\n                    },\r\n                    icon: Icon(\r\n                      Icons.arrow_back_ios_new_rounded,\r\n                      color: primaryColor,\r\n                    ),\r\n                  ),\r\n                  Text(\r\n                    \"Senders\".tr(),\r\n                    style: const TextStyle(\r\n                      color: Colors.black,\r\n                      fontSize: 20,\r\n                    ),\r\n                  ),\r\n                  IconButton(\r\n                    onPressed: () {},\r\n                    icon: const Icon(\r\n                      Icons.arrow_back_ios_new_rounded,\r\n                      color: Colors.transparent,\r\n                    ),\r\n                  ),\r\n                ],\r\n              ),\r\n              Padding(\r\n                padding: const EdgeInsetsDirectional.only(start: 10, end: 10),\r\n                child: Column(\r\n                  crossAxisAlignment: CrossAxisAlignment.start,\r\n                  mainAxisAlignment: MainAxisAlignment.start,\r\n                  children: [\r\n                    Padding(\r\n                      padding: const EdgeInsetsDirectional.only(top: 5),\r\n                      child: TextField(\r\n                        controller: searchTextField,\r\n                        onChanged: (value) {\r\n                          searchSenders(value);\r\n                        },\r\n                        decoration: InputDecoration(\r\n                          prefixIcon: const Icon(Icons.search_rounded),\r\n                          suffixIcon: IconButton(\r\n                            onPressed: () {\r\n                              setState(() {\r\n                                searchTextField.clear();\r\n                              });\r\n                            },\r\n                            icon: const Icon(Icons.cancel),\r\n                          ),\r\n                          filled: true,\r\n                          fillColor: Colors.black.withOpacity(0.05),\r\n                          contentPadding: const EdgeInsets.all(15),\r\n                          hintText: \"Search ...\".tr(),\r\n                          hintStyle:\r\n                              const TextStyle(color: Colors.grey, fontSize: 19),\r\n                          enabledBorder: UnderlineInputBorder(\r\n                            borderSide: BorderSide(color: backGroundColor),\r\n                            borderRadius: BorderRadius.circular(30),\r\n                          ),\r\n                          focusedBorder: UnderlineInputBorder(\r\n                            borderRadius: BorderRadius.circular(30),\r\n                            borderSide: BorderSide(color: backGroundColor),\r\n                          ),\r\n                        ),\r\n                      ),\r\n                    ),\r\n                  ],\r\n                ),\r\n              ),\r\n            ],\r\n          ),\r\n        ),\r\n        Expanded(\r\n          child: FutureBuilder(\r\n            future: senders,\r\n            builder: (context, snapshot) {\r\n              if (snapshot.connectionState == ConnectionState.waiting) {\r\n                return const Center(\r\n                  child: CircularProgressIndicator(),\r\n                );\r\n              } else if (snapshot.hasError) {\r\n                return Text(snapshot.error.toString());\r\n              } else if (!snapshot.hasData) {\r\n                return const Center(\r\n                  child: Text('No data available.'),\r\n                );\r\n              }\r\n\r\n              sendersData = snapshot.data as Senders;\r\n              final categorizedSenders = categorizeSenders(sendersData);\r\n              if (matchingPairs.isEmpty && searchTextField.text.isNotEmpty) {\r\n                return Center(\r\n                  child: Column(\r\n                    mainAxisAlignment: MainAxisAlignment.center,\r\n                    crossAxisAlignment: CrossAxisAlignment.center,\r\n                    children: [\r\n                      Align(\r\n                        alignment: Alignment.center,\r\n                        child: Image.asset('images/result_not_found.png',\r\n                            fit: BoxFit.cover, height: 250),\r\n                      ),\r\n                      const SizedBox(\r\n                        height: 70,\r\n                      )\r\n                    ],\r\n                  ),\r\n                );\r\n              }\r\n              return ListView.separated(\r\n                padding: EdgeInsets.zero,\r\n                separatorBuilder: (context, index) {\r\n                  return const SizedBox(\r\n                    height: 10,\r\n                  );\r\n                },\r\n                physics: const BouncingScrollPhysics(),\r\n                itemCount: categorizedSenders.length,\r\n                itemBuilder: (context, sectionIndex) {\r\n                  final category =\r\n                      categorizedSenders.keys.elementAt(sectionIndex);\r\n                  final categorySenders = categorizedSenders[category]!;\r\n\r\n                  // Filter the matchingPairs for the current category and search term\r\n                  final filteredMatchingPairs = matchingPairs.where((entry) {\r\n                    final sender = entry.value;\r\n                    final senderCategory = sender.category!.name!.toLowerCase();\r\n                    final senderName = sender.name!.toLowerCase();\r\n                    final searchTerm = searchTextField.text.toLowerCase();\r\n\r\n                    return senderCategory == category.toLowerCase() &&\r\n                        (senderName.contains(searchTerm) ||\r\n                            sender.mobile!.contains(searchTerm));\r\n                  }).toList();\r\n\r\n                  // Check if the section is empty, and skip it if so\r\n                  if ((filteredMatchingPairs.isEmpty &&\r\n                          categorySenders.isEmpty) ||\r\n                      (filteredMatchingPairs.isEmpty &&\r\n                          searchTextField.text.isNotEmpty)) {\r\n                    return const SizedBox.shrink(); // Hide the empty section\r\n                  }\r\n\r\n                  return Padding(\r\n                    padding: const EdgeInsets.only(right: 12.0, left: 12),\r\n                    child: Column(\r\n                      children: [\r\n                        Column(\r\n                            crossAxisAlignment: CrossAxisAlignment.start,\r\n                            mainAxisAlignment: MainAxisAlignment.start,\r\n                            children: [\r\n                              Column(\r\n                                  crossAxisAlignment: CrossAxisAlignment.start,\r\n                                  mainAxisAlignment: MainAxisAlignment.start,\r\n                                  children: [\r\n                                    Padding(\r\n                                      padding: const EdgeInsetsDirectional.only(\r\n                                        top: 20.0,\r\n                                        start: 5,\r\n                                      ),\r\n                                      child: Text(\r\n                                        category.tr(),\r\n                                        style: const TextStyle(\r\n                                          fontSize: 20,\r\n                                          fontWeight: FontWeight.w600,\r\n                                        ),\r\n                                      ),\r\n                                    ),\r\n                                    Container(\r\n                                      margin: const EdgeInsets.only(top: 10),\r\n                                      width: MediaQuery.of(context).size.width,\r\n                                      height: 1,\r\n                                      color: Colors.grey.shade300,\r\n                                    )\r\n                                  ]),\r\n                            ]),\r\n                        ListView.builder(\r\n                          padding: EdgeInsets.zero,\r\n                          shrinkWrap: true,\r\n                          physics: const NeverScrollableScrollPhysics(),\r\n                          itemCount: searchTextField.text.isNotEmpty\r\n                              ? filteredMatchingPairs.length\r\n                              : categorySenders.length,\r\n                          itemBuilder: (context, itemIndex) {\r\n                            final entry = searchTextField.text.isNotEmpty &&\r\n                                    itemIndex < filteredMatchingPairs.length\r\n                                ? filteredMatchingPairs[itemIndex]\r\n                                : null;\r\n\r\n                            final sender = searchTextField.text.isEmpty &&\r\n                                    itemIndex < categorySenders.length\r\n                                ? categorySenders[itemIndex]\r\n                                : null;\r\n\r\n                            if (entry != null) {\r\n                              return Slidable(\r\n                                endActionPane: ActionPane(\r\n                                    extentRatio: 0.44,\r\n                                    motion: const ScrollMotion(),\r\n                                    children: [\r\n                                      CustomSlidableAction(\r\n                                        backgroundColor: Theme.of(context)\r\n                                            .scaffoldBackgroundColor,\r\n                                        padding:\r\n                                            const EdgeInsets.only(left: 30),\r\n                                        onPressed: (context) {\r\n                                          showDialog(\r\n                                            barrierDismissible: false,\r\n                                            context: context,\r\n                                            builder: (BuildContext context) {\r\n                                              return AlertDialog(\r\n                                                backgroundColor: Colors.white,\r\n                                                title: SizedBox(\r\n                                                  width: 290,\r\n                                                  child: Text(\r\n                                                    'Do you want really to delete \"${entry.value.name}\" ?',\r\n                                                    style: const TextStyle(\r\n                                                      color: Colors.black,\r\n                                                      fontWeight:\r\n                                                          FontWeight.w600,\r\n                                                      fontSize: 20,\r\n                                                    ),\r\n                                                  ),\r\n                                                ),\r\n                                                actions: [\r\n                                                  TextButton(\r\n                                                    onPressed: () {\r\n                                                      Navigator.pop(context);\r\n                                                    },\r\n                                                    child: const Text(\r\n                                                      'Cancel',\r\n                                                      style: TextStyle(\r\n                                                        color: Colors.black,\r\n                                                        fontWeight:\r\n                                                            FontWeight.w500,\r\n                                                        fontSize: 17,\r\n                                                      ),\r\n                                                    ),\r\n                                                  ),\r\n                                                  TextButton(\r\n                                                    onPressed: () async {\r\n                                                      await deleteSender(\r\n                                                              entry.value.id!)!\r\n                                                          .then((statusCode) {\r\n                                                        if (statusCode == 200) {\r\n                                                          ScaffoldMessenger.of(\r\n                                                                  context)\r\n                                                              .showSnackBar(\r\n                                                                  SnackBar(\r\n                                                            content:\r\n                                                                const Center(\r\n                                                              child: Text(\r\n                                                                'Deleted Successfully',\r\n                                                                style: TextStyle(\r\n                                                                    fontSize:\r\n                                                                        15,\r\n                                                                    fontWeight:\r\n                                                                        FontWeight\r\n                                                                            .w500),\r\n                                                              ),\r\n                                                            ),\r\n                                                            backgroundColor:\r\n                                                                primaryColor\r\n                                                                    .withOpacity(\r\n                                                                        0.7),\r\n                                                            duration:\r\n                                                                const Duration(\r\n                                                                    seconds: 2),\r\n                                                            width: 190,\r\n                                                            elevation: 0,\r\n                                                            behavior:\r\n                                                                SnackBarBehavior\r\n                                                                    .floating,\r\n                                                          ));\r\n                                                          setState(() {\r\n                                                            senders =\r\n                                                                getSenders();\r\n                                                            initializeData();\r\n                                                            Navigator.pop(\r\n                                                                context);\r\n                                                          });\r\n                                                        } else {\r\n                                                          ScaffoldMessenger.of(\r\n                                                                  context)\r\n                                                              .showSnackBar(\r\n                                                                  const SnackBar(\r\n                                                            content: Center(\r\n                                                              child: Text(\r\n                                                                'Something went wrong',\r\n                                                                style: TextStyle(\r\n                                                                    fontSize:\r\n                                                                        15,\r\n                                                                    fontWeight:\r\n                                                                        FontWeight\r\n                                                                            .w500),\r\n                                                              ),\r\n                                                            ),\r\n                                                            backgroundColor:\r\n                                                                Colors\r\n                                                                    .redAccent,\r\n                                                            duration: Duration(\r\n                                                                seconds: 2),\r\n                                                            width: 190,\r\n                                                            elevation: 0,\r\n                                                            behavior:\r\n                                                                SnackBarBehavior\r\n                                                                    .floating,\r\n                                                          ));\r\n                                                          Navigator.pop(\r\n                                                              context);\r\n                                                        }\r\n                                                      });\r\n                                                    },\r\n                                                    child: const Text(\r\n                                                      'OK',\r\n                                                      style: TextStyle(\r\n                                                        color: Colors.black,\r\n                                                        fontWeight:\r\n                                                            FontWeight.w500,\r\n                                                        fontSize: 17,\r\n                                                      ),\r\n                                                    ),\r\n                                                  ),\r\n                                                ],\r\n                                              );\r\n                                            },\r\n                                          );\r\n                                        },\r\n                                        child: Row(\r\n                                          children: [\r\n                                            Container(\r\n                                              height: 50,\r\n                                              width: 50,\r\n                                              decoration: BoxDecoration(\r\n                                                  color: Colors.red,\r\n                                                  borderRadius:\r\n                                                      BorderRadius.circular(\r\n                                                          15)),\r\n                                              child: const Center(\r\n                                                child: Icon(\r\n                                                  Icons.delete,\r\n                                                  color: Colors.white,\r\n                                                  size: 35,\r\n                                                ),\r\n                                              ),\r\n                                            ),\r\n                                          ],\r\n                                        ),\r\n                                      ),\r\n                                      CustomSlidableAction(\r\n                                        backgroundColor: Theme.of(context)\r\n                                            .scaffoldBackgroundColor,\r\n                                        padding: EdgeInsets.zero,\r\n                                        onPressed: (context) {\r\n                                          showDialog(\r\n                                            barrierDismissible: false,\r\n                                            context: context,\r\n                                            builder: (BuildContext context) {\r\n                                              return AlertDialog(\r\n                                                backgroundColor: Colors.white,\r\n                                                title: SizedBox(\r\n                                                  width: 290,\r\n                                                  child: Text(\r\n                                                    'Do you want really to delete \"${entry.value.name}\" ?',\r\n                                                    style: const TextStyle(\r\n                                                      color: Colors.black,\r\n                                                      fontWeight:\r\n                                                          FontWeight.w600,\r\n                                                      fontSize: 20,\r\n                                                    ),\r\n                                                  ),\r\n                                                ),\r\n                                                actions: [\r\n                                                  TextButton(\r\n                                                    onPressed: () {\r\n                                                      Navigator.pop(context);\r\n                                                    },\r\n                                                    child: const Text(\r\n                                                      'Cancel',\r\n                                                      style: TextStyle(\r\n                                                        color: Colors.black,\r\n                                                        fontWeight:\r\n                                                            FontWeight.w500,\r\n                                                        fontSize: 17,\r\n                                                      ),\r\n                                                    ),\r\n                                                  ),\r\n                                                  TextButton(\r\n                                                    onPressed: () async {\r\n                                                      await deleteSender(\r\n                                                              entry.value.id!)!\r\n                                                          .then((statusCode) {\r\n                                                        if (statusCode == 200) {\r\n                                                          ScaffoldMessenger.of(\r\n                                                                  context)\r\n                                                              .showSnackBar(\r\n                                                                  SnackBar(\r\n                                                            content:\r\n                                                                const Center(\r\n                                                              child: Text(\r\n                                                                'Deleted Successfully',\r\n                                                                style: TextStyle(\r\n                                                                    fontSize:\r\n                                                                        15,\r\n                                                                    fontWeight:\r\n                                                                        FontWeight\r\n                                                                            .w500),\r\n                                                              ),\r\n                                                            ),\r\n                                                            backgroundColor:\r\n                                                                primaryColor\r\n                                                                    .withOpacity(\r\n                                                                        0.7),\r\n                                                            duration:\r\n                                                                const Duration(\r\n                                                                    seconds: 2),\r\n                                                            width: 190,\r\n                                                            elevation: 0,\r\n                                                            behavior:\r\n                                                                SnackBarBehavior\r\n                                                                    .floating,\r\n                                                          ));\r\n                                                          setState(() {\r\n                                                            senders =\r\n                                                                getSenders();\r\n                                                            initializeData();\r\n                                                            Navigator.pop(\r\n                                                                context);\r\n                                                          });\r\n                                                        } else {\r\n                                                          ScaffoldMessenger.of(\r\n                                                                  context)\r\n                                                              .showSnackBar(\r\n                                                                  const SnackBar(\r\n                                                            content: Center(\r\n                                                              child: Text(\r\n                                                                'Something went wrong',\r\n                                                                style: TextStyle(\r\n                                                                    fontSize:\r\n                                                                        15,\r\n                                                                    fontWeight:\r\n                                                                        FontWeight\r\n                                                                            .w500),\r\n                                                              ),\r\n                                                            ),\r\n                                                            backgroundColor:\r\n                                                                Colors\r\n                                                                    .redAccent,\r\n                                                            duration: Duration(\r\n                                                                seconds: 2),\r\n                                                            width: 190,\r\n                                                            elevation: 0,\r\n                                                            behavior:\r\n                                                                SnackBarBehavior\r\n                                                                    .floating,\r\n                                                          ));\r\n                                                          Navigator.pop(\r\n                                                              context);\r\n                                                        }\r\n                                                      });\r\n                                                    },\r\n                                                    child: const Text(\r\n                                                      'OK',\r\n                                                      style: TextStyle(\r\n                                                        color: Colors.black,\r\n                                                        fontWeight:\r\n                                                            FontWeight.w500,\r\n                                                        fontSize: 17,\r\n                                                      ),\r\n                                                    ),\r\n                                                  ),\r\n                                                ],\r\n                                              );\r\n                                            },\r\n                                          );\r\n                                        },\r\n                                        child: Container(\r\n                                          height: 50,\r\n                                          width: 50,\r\n                                          decoration: BoxDecoration(\r\n                                              color: Colors.amber,\r\n                                              borderRadius:\r\n                                                  BorderRadius.circular(15)),\r\n                                          child: const Center(\r\n                                            child: Icon(\r\n                                              Icons.edit,\r\n                                              color: Colors.white,\r\n                                              size: 35,\r\n                                            ),\r\n                                          ),\r\n                                        ),\r\n                                      ),\r\n                                    ]),\r\n                                child: ListTile(\r\n                                  onTap: () {\r\n                                    setState(() {\r\n                                      Navigator.push(context, MaterialPageRoute(\r\n                                        builder: (context) {\r\n                                          return SenderMails(sender: sender);\r\n                                        },\r\n                                      ));\r\n                                    });\r\n                                  },\r\n                                  title: Row(\r\n                                    children: [\r\n                                      const SizedBox(\r\n                                        width: 30,\r\n                                      ),\r\n                                      const Icon(Icons.person_3_outlined),\r\n                                      const SizedBox(\r\n                                        width: 30,\r\n                                      ),\r\n                                      Column(\r\n                                        crossAxisAlignment:\r\n                                            CrossAxisAlignment.start,\r\n                                        mainAxisAlignment:\r\n                                            MainAxisAlignment.start,\r\n                                        children: [\r\n                                          Text(\r\n                                            entry.value.name!,\r\n                                            style:\r\n                                                const TextStyle(fontSize: 20),\r\n                                          ),\r\n                                          const SizedBox(\r\n                                            height: 8,\r\n                                          ),\r\n                                          Row(\r\n                                            children: [\r\n                                              const Icon(\r\n                                                Icons.phone,\r\n                                                size: 20,\r\n                                              ),\r\n                                              const SizedBox(\r\n                                                width: 10,\r\n                                              ),\r\n                                              Text(\r\n                                                entry.value.mobile!,\r\n                                                style: const TextStyle(\r\n                                                    fontSize: 17),\r\n                                              )\r\n                                            ],\r\n                                          )\r\n                                        ],\r\n                                      ),\r\n                                    ],\r\n                                  ),\r\n                                ),\r\n                              );\r\n                            } else if (sender != null) {\r\n                              return Slidable(\r\n                                endActionPane: ActionPane(\r\n                                    extentRatio: 0.43,\r\n                                    motion: const ScrollMotion(),\r\n                                    children: [\r\n                                      CustomSlidableAction(\r\n                                        backgroundColor: Theme.of(context)\r\n                                            .scaffoldBackgroundColor,\r\n                                        padding:\r\n                                            const EdgeInsets.only(left: 30),\r\n                                        onPressed: (context) {\r\n                                          showDialog(\r\n                                            barrierDismissible: false,\r\n                                            context: context,\r\n                                            builder: (BuildContext context) {\r\n                                              return AlertDialog(\r\n                                                backgroundColor: Colors.white,\r\n                                                title: SizedBox(\r\n                                                  width: 290,\r\n                                                  child: Text(\r\n                                                    'Do you want really to delete \"${sender.name}\" ?',\r\n                                                    style: const TextStyle(\r\n                                                      color: Colors.black,\r\n                                                      fontWeight:\r\n                                                          FontWeight.w600,\r\n                                                      fontSize: 20,\r\n                                                    ),\r\n                                                  ),\r\n                                                ),\r\n                                                actions: [\r\n                                                  TextButton(\r\n                                                    onPressed: () {\r\n                                                      Navigator.pop(context);\r\n                                                    },\r\n                                                    child: const Text(\r\n                                                      'Cancel',\r\n                                                      style: TextStyle(\r\n                                                        color: Colors.black,\r\n                                                        fontWeight:\r\n                                                            FontWeight.w500,\r\n                                                        fontSize: 17,\r\n                                                      ),\r\n                                                    ),\r\n                                                  ),\r\n                                                  TextButton(\r\n                                                    onPressed: () async {\r\n                                                      await deleteSender(\r\n                                                              sender.id!)!\r\n                                                          .then((statusCode) {\r\n                                                        if (statusCode == 200) {\r\n                                                          ScaffoldMessenger.of(\r\n                                                                  context)\r\n                                                              .showSnackBar(\r\n                                                                  SnackBar(\r\n                                                            content:\r\n                                                                const Center(\r\n                                                              child: Text(\r\n                                                                'Deleted Successfully',\r\n                                                                style: TextStyle(\r\n                                                                    fontSize:\r\n                                                                        15,\r\n                                                                    fontWeight:\r\n                                                                        FontWeight\r\n                                                                            .w500),\r\n                                                              ),\r\n                                                            ),\r\n                                                            backgroundColor:\r\n                                                                primaryColor\r\n                                                                    .withOpacity(\r\n                                                                        0.7),\r\n                                                            duration:\r\n                                                                const Duration(\r\n                                                                    seconds: 2),\r\n                                                            width: 190,\r\n                                                            elevation: 0,\r\n                                                            behavior:\r\n                                                                SnackBarBehavior\r\n                                                                    .floating,\r\n                                                          ));\r\n                                                          setState(() {\r\n                                                            senders =\r\n                                                                getSenders();\r\n                                                            initializeData();\r\n                                                            Navigator.pop(\r\n                                                                context);\r\n                                                          });\r\n                                                        } else {\r\n                                                          ScaffoldMessenger.of(\r\n                                                                  context)\r\n                                                              .showSnackBar(\r\n                                                                  const SnackBar(\r\n                                                            content: Center(\r\n                                                              child: Text(\r\n                                                                'Something went wrong',\r\n                                                                style: TextStyle(\r\n                                                                    fontSize:\r\n                                                                        15,\r\n                                                                    fontWeight:\r\n                                                                        FontWeight\r\n                                                                            .w500),\r\n                                                              ),\r\n                                                            ),\r\n                                                            backgroundColor:\r\n                                                                Colors\r\n                                                                    .redAccent,\r\n                                                            duration: Duration(\r\n                                                                seconds: 2),\r\n                                                            width: 190,\r\n                                                            elevation: 0,\r\n                                                            behavior:\r\n                                                                SnackBarBehavior\r\n                                                                    .floating,\r\n                                                          ));\r\n                                                          Navigator.pop(\r\n                                                              context);\r\n                                                        }\r\n                                                      });\r\n                                                    },\r\n                                                    child: const Text(\r\n                                                      'OK',\r\n                                                      style: TextStyle(\r\n                                                        color: Colors.black,\r\n                                                        fontWeight:\r\n                                                            FontWeight.w500,\r\n                                                        fontSize: 17,\r\n                                                      ),\r\n                                                    ),\r\n                                                  ),\r\n                                                ],\r\n                                              );\r\n                                            },\r\n                                          );\r\n                                        },\r\n                                        child: Row(\r\n                                          children: [\r\n                                            Container(\r\n                                              height: 50,\r\n                                              width: 50,\r\n                                              decoration: BoxDecoration(\r\n                                                  color: Colors.red,\r\n                                                  borderRadius:\r\n                                                      BorderRadius.circular(\r\n                                                          15)),\r\n                                              child: const Center(\r\n                                                child: Icon(\r\n                                                  Icons.delete,\r\n                                                  color: Colors.white,\r\n                                                  size: 35,\r\n                                                ),\r\n                                              ),\r\n                                            ),\r\n                                          ],\r\n                                        ),\r\n                                      ),\r\n                                      CustomSlidableAction(\r\n                                        backgroundColor: Theme.of(context)\r\n                                            .scaffoldBackgroundColor,\r\n                                        padding: EdgeInsets.zero,\r\n                                        onPressed: (context) {\r\n                                          showDialog(\r\n                                            barrierDismissible: false,\r\n                                            context: context,\r\n                                            builder: (BuildContext context) {\r\n                                              return Padding(\r\n                                                padding: EdgeInsets.only(\r\n                                                    bottom:\r\n                                                        MediaQuery.of(context)\r\n                                                            .viewInsets\r\n                                                            .bottom),\r\n                                                child: AlertDialog(\r\n                                                  shape: RoundedRectangleBorder(\r\n                                                      borderRadius:\r\n                                                          BorderRadius.circular(\r\n                                                              15.0)),\r\n                                                  titlePadding: EdgeInsets.zero,\r\n                                                  backgroundColor: Colors.white,\r\n                                                  title: EditSenderDialouge(\r\n                                                    sender: sender,\r\n                                                    dotThen: (value) {\r\n                                                      setState(() {\r\n                                                        senders = getSenders();\r\n                                                        initializeData();\r\n                                                        Navigator.pop(context);\r\n                                                        showAlert(context,\r\n                                                            message:\r\n                                                                'Sender Updated',\r\n                                                            color: primaryColor\r\n                                                                .withOpacity(\r\n                                                                    0.7),\r\n                                                            width: 150);\r\n                                                      });\r\n                                                    },\r\n                                                  ),\r\n                                                ),\r\n                                              );\r\n                                            },\r\n                                          );\r\n                                        },\r\n                                        child: Container(\r\n                                          height: 50,\r\n                                          width: 50,\r\n                                          decoration: BoxDecoration(\r\n                                              color: Colors.amber,\r\n                                              borderRadius:\r\n                                                  BorderRadius.circular(15)),\r\n                                          child: const Center(\r\n                                            child: Icon(\r\n                                              Icons.edit,\r\n                                              color: Colors.white,\r\n                                              size: 35,\r\n                                            ),\r\n                                          ),\r\n                                        ),\r\n                                      ),\r\n                                    ]),\r\n                                child: ListTile(\r\n                                  onTap: () {\r\n                                    setState(() {\r\n                                      Navigator.push(context, MaterialPageRoute(\r\n                                        builder: (context) {\r\n                                          return SenderMails(sender: sender);\r\n                                        },\r\n                                      ));\r\n                                    });\r\n                                  },\r\n                                  title: Row(\r\n                                    children: [\r\n                                      const SizedBox(\r\n                                        width: 30,\r\n                                      ),\r\n                                      const Icon(Icons.person_3_outlined),\r\n                                      const SizedBox(\r\n                                        width: 30,\r\n                                      ),\r\n                                      Column(\r\n                                        crossAxisAlignment:\r\n                                            CrossAxisAlignment.start,\r\n                                        mainAxisAlignment:\r\n                                            MainAxisAlignment.start,\r\n                                        children: [\r\n                                          Text(\r\n                                            sender.name!,\r\n                                            style:\r\n                                                const TextStyle(fontSize: 20),\r\n                                          ),\r\n                                          const SizedBox(\r\n                                            height: 8,\r\n                                          ),\r\n                                          Row(\r\n                                            children: [\r\n                                              const Icon(\r\n                                                Icons.phone,\r\n                                                size: 20,\r\n                                              ),\r\n                                              const SizedBox(\r\n                                                width: 10,\r\n                                              ),\r\n                                              Text(\r\n                                                sender.mobile!,\r\n                                                style: const TextStyle(\r\n                                                    fontSize: 17),\r\n                                              )\r\n                                            ],\r\n                                          )\r\n                                        ],\r\n                                      ),\r\n                                    ],\r\n                                  ),\r\n                                ),\r\n                              );\r\n                            }\r\n                            return const SizedBox.shrink();\r\n                          },\r\n                        ),\r\n                      ],\r\n                    ),\r\n                  );\r\n                },\r\n              );\r\n            },\r\n          ),\r\n        )\r\n      ],\r\n    ));\r\n  }\r\n\r\n  // searchSenders(Senders sendersData, String searchTerm) {\r\n  //   result.clear();\r\n  //   for (int i = 0; i < sendersData.data.length; i++) {\r\n  //     final sender = sendersData.data[i];\r\n  //     final senderName = sender.name;\r\n  //     final senderMobile = sender.mobile;\r\n\r\n  //     if (senderMobile.contains(searchTerm) ||\r\n  //         senderName.contains(searchTerm)) {\r\n  //       result.addAll([senderName, senderMobile]);\r\n  //     }\r\n  //   }\r\n  // }\r\n}\r\n\r\nMap<String, List<SingleSender>> categorizeSenders(Senders sendersData) {\r\n  final categorizedSenders = <String, List<SingleSender>>{};\r\n\r\n  for (final sender in sendersData.data!) {\r\n    final category = sender.category!.name;\r\n    if (!categorizedSenders.containsKey(category!)) {\r\n      categorizedSenders[category] = <SingleSender>[];\r\n    }\r\n    categorizedSenders[category]!.add(sender);\r\n  }\r\n\r\n  return categorizedSenders;\r\n}\r\n"
        }
    ]
}